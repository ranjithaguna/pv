/**
 * \brief Component description for PIC32CX/0525SG12 PROCHOT_MON
 *
 * Copyright (c) 2018 Microchip Technology Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* file generated from device description version 2018-04-24T21:15:30Z */
#ifndef _PIC32CX_0525SG12_PROCHOT_MON_COMPONENT_H_
#define _PIC32CX_0525SG12_PROCHOT_MON_COMPONENT_H_

/** \addtogroup PIC32CX_0525SG12_PROCHOT_MON This block monitors the PROCHOT# signal generated by the host processor. It is designed to detect single assertions and monitor cumulative PROCHOT active time.
 *  @{
 */
/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR PROCHOT_MON */
/* ========================================================================== */

/* -------- PROCHOT_MON_PHOT_CUMULATVE_COUNT : (PROCHOT_MON Offset: 0x00) (R/W 32) PROCHOT Cumulative Count Register -------- */

typedef union
{
  struct
  {
    uint32_t CUMULATIVE_PROCHOT_ACTIVE:24;  /**< bit:  0..23  This register contains the current filtered PROCHOT Active Counter value. */
    uint32_t :8;                        /**< bit: 24..31  Reserved                                      */
  };
  uint32_t w;
} __PROCHOT_MON_PHOT_CUMULATVE_COUNT_bits_t;
#define PROCHOT_MON_PHOT_CUMULATVE_COUNT_RESETVALUE (0x00U)                                       /**<  (PROCHOT_MON_PHOT_CUMULATVE_COUNT) PROCHOT Cumulative Count Register  Reset Value */

#define PROCHOT_MON_PHOT_CUMULATVE_COUNT_CUMULATIVE_PROCHOT_ACTIVE_Pos (0)                                            /**< (PROCHOT_MON_PHOT_CUMULATVE_COUNT) This register contains the current filtered PROCHOT Active Counter value. Position */
#define PROCHOT_MON_PHOT_CUMULATVE_COUNT_CUMULATIVE_PROCHOT_ACTIVE_Msk (0xFFFFFFU << PROCHOT_MON_PHOT_CUMULATVE_COUNT_CUMULATIVE_PROCHOT_ACTIVE_Pos)  /**< (PROCHOT_MON_PHOT_CUMULATVE_COUNT) This register contains the current filtered PROCHOT Active Counter value. Mask */
#define PROCHOT_MON_PHOT_CUMULATVE_COUNT_CUMULATIVE_PROCHOT_ACTIVE(value) (PROCHOT_MON_PHOT_CUMULATVE_COUNT_CUMULATIVE_PROCHOT_ACTIVE_Msk & ((value) << PROCHOT_MON_PHOT_CUMULATVE_COUNT_CUMULATIVE_PROCHOT_ACTIVE_Pos))
#define PROCHOT_MON_PHOT_CUMULATVE_COUNT_Msk  (0x00FFFFFFUL)                                 /**< (PROCHOT_MON_PHOT_CUMULATVE_COUNT) Register Mask  */

/* -------- PROCHOT_MON_PROCHOT_DC_COUNT : (PROCHOT_MON Offset: 0x04) (R/W 32) PROCHOT Duty Cycle Count Register -------- */

typedef union
{
  struct
  {
    uint32_t DUTY_CYCLE_COUNT:24;       /**< bit:  0..23  The contents of the PROCHOT Cumulative Count Register is copied into this register when the PROCHOT Duty Cycle Period Register transitions from 1 to 0. */
    uint32_t :8;                        /**< bit: 24..31  Reserved                                      */
  };
  uint32_t w;
} __PROCHOT_MON_PROCHOT_DC_COUNT_bits_t;
#define PROCHOT_MON_PROCHOT_DC_COUNT_RESETVALUE (0x00U)                                       /**<  (PROCHOT_MON_PROCHOT_DC_COUNT) PROCHOT Duty Cycle Count Register  Reset Value */

#define PROCHOT_MON_PROCHOT_DC_COUNT_DUTY_CYCLE_COUNT_Pos (0)                                            /**< (PROCHOT_MON_PROCHOT_DC_COUNT) The contents of the PROCHOT Cumulative Count Register is copied into this register when the PROCHOT Duty Cycle Period Register transitions from 1 to 0. Position */
#define PROCHOT_MON_PROCHOT_DC_COUNT_DUTY_CYCLE_COUNT_Msk (0xFFFFFFU << PROCHOT_MON_PROCHOT_DC_COUNT_DUTY_CYCLE_COUNT_Pos)  /**< (PROCHOT_MON_PROCHOT_DC_COUNT) The contents of the PROCHOT Cumulative Count Register is copied into this register when the PROCHOT Duty Cycle Period Register transitions from 1 to 0. Mask */
#define PROCHOT_MON_PROCHOT_DC_COUNT_DUTY_CYCLE_COUNT(value) (PROCHOT_MON_PROCHOT_DC_COUNT_DUTY_CYCLE_COUNT_Msk & ((value) << PROCHOT_MON_PROCHOT_DC_COUNT_DUTY_CYCLE_COUNT_Pos))
#define PROCHOT_MON_PROCHOT_DC_COUNT_Msk      (0x00FFFFFFUL)                                 /**< (PROCHOT_MON_PROCHOT_DC_COUNT) Register Mask  */

/* -------- PROCHOT_MON_PROCHOT_DC_PERIOD : (PROCHOT_MON Offset: 0x08) (R/W 32) PROCHOT Duty Cycle Period Register -------- */

typedef union
{
  struct
  {
    uint32_t DUTY_CYCLE_PERIOD:24;      /**< bit:  0..23  This register defines the number of 100KHz periods required for a duty cycle measurement. */
    uint32_t :8;                        /**< bit: 24..31  Reserved                                      */
  };
  uint32_t w;
} __PROCHOT_MON_PROCHOT_DC_PERIOD_bits_t;
#define PROCHOT_MON_PROCHOT_DC_PERIOD_RESETVALUE (0x00U)                                       /**<  (PROCHOT_MON_PROCHOT_DC_PERIOD) PROCHOT Duty Cycle Period Register  Reset Value */

#define PROCHOT_MON_PROCHOT_DC_PERIOD_DUTY_CYCLE_PERIOD_Pos (0)                                            /**< (PROCHOT_MON_PROCHOT_DC_PERIOD) This register defines the number of 100KHz periods required for a duty cycle measurement. Position */
#define PROCHOT_MON_PROCHOT_DC_PERIOD_DUTY_CYCLE_PERIOD_Msk (0xFFFFFFU << PROCHOT_MON_PROCHOT_DC_PERIOD_DUTY_CYCLE_PERIOD_Pos)  /**< (PROCHOT_MON_PROCHOT_DC_PERIOD) This register defines the number of 100KHz periods required for a duty cycle measurement. Mask */
#define PROCHOT_MON_PROCHOT_DC_PERIOD_DUTY_CYCLE_PERIOD(value) (PROCHOT_MON_PROCHOT_DC_PERIOD_DUTY_CYCLE_PERIOD_Msk & ((value) << PROCHOT_MON_PROCHOT_DC_PERIOD_DUTY_CYCLE_PERIOD_Pos))
#define PROCHOT_MON_PROCHOT_DC_PERIOD_Msk     (0x00FFFFFFUL)                                 /**< (PROCHOT_MON_PROCHOT_DC_PERIOD) Register Mask  */

/* -------- PROCHOT_MON_PROCHOT_STATUS_CONTROL : (PROCHOT_MON Offset: 0x0c) (R/W 32) PROCHOT Status/Control Register -------- */

typedef union
{
  struct
  {
    uint32_t PHOT_ENABLE:1;             /**< bit:      0  This bit enables the PROCHOT Monitor logic.   */
    uint32_t PHOT_PIN:1;                /**< bit:      1  When PHOT_ENABLE is 1b, this bit reflects the state of the PROCHOT# Pin input. */
    uint32_t ASSERT_ENABLE:1;           /**< bit:      2  This bit determines whether or not an interrupt will be generated when the PHOT_ASSERT bit is set. */
    uint32_t PERIOD_ENABLE:1;           /**< bit:      3  This bit determines whether or not an interrupt will be generated when the PHOT_PERIOD bit is set. */
    uint32_t PHOT_RESET:1;              /**< bit:      4  Writing this self-clearing bit to one resets all the registers and logic in the PROCHOT Monitor block to its defined initial state. */
    uint32_t FILT_ENABLE:1;             /**< bit:      5  This bit determines whether a digital filter eliminates pulses on the PROCHOT# signal before PROCHOT# is sampled by the Assertion counter or the Active counter. */
    uint32_t :4;                        /**< bit:   6..9  Reserved                                      */
    uint32_t PHOT_ASSERT:1;             /**< bit:     10  This bit is set when the PROCHOT Assertion Counter Register value is greater than or equal to the PROCHOT Assertion Counter Limit Register value. (R/WC) */
    uint32_t PHOT_PERIOD:1;             /**< bit:     11  This sticky status bit is set to '1b' when the PROCHOT Period Counter transitions from '1b' to '0b.' (R/WC) */
    uint32_t :20;                       /**< bit: 12..31  Reserved                                      */
  };
  uint32_t w;
} __PROCHOT_MON_PROCHOT_STATUS_CONTROL_bits_t;
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_RESETVALUE (0x00U)                                       /**<  (PROCHOT_MON_PROCHOT_STATUS_CONTROL) PROCHOT Status/Control Register  Reset Value */

#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_ENABLE_Pos (0)                                            /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit enables the PROCHOT Monitor logic. Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_ENABLE_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_ENABLE_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit enables the PROCHOT Monitor logic. Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_PIN_Pos (1)                                            /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) When PHOT_ENABLE is 1b, this bit reflects the state of the PROCHOT# Pin input. Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_PIN_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_PIN_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) When PHOT_ENABLE is 1b, this bit reflects the state of the PROCHOT# Pin input. Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_ASSERT_ENABLE_Pos (2)                                            /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit determines whether or not an interrupt will be generated when the PHOT_ASSERT bit is set. Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_ASSERT_ENABLE_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_ASSERT_ENABLE_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit determines whether or not an interrupt will be generated when the PHOT_ASSERT bit is set. Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PERIOD_ENABLE_Pos (3)                                            /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit determines whether or not an interrupt will be generated when the PHOT_PERIOD bit is set. Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PERIOD_ENABLE_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_PERIOD_ENABLE_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit determines whether or not an interrupt will be generated when the PHOT_PERIOD bit is set. Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_RESET_Pos (4)                                            /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) Writing this self-clearing bit to one resets all the registers and logic in the PROCHOT Monitor block to its defined initial state. Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_RESET_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_RESET_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) Writing this self-clearing bit to one resets all the registers and logic in the PROCHOT Monitor block to its defined initial state. Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_FILT_ENABLE_Pos (5)                                            /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit determines whether a digital filter eliminates pulses on the PROCHOT# signal before PROCHOT# is sampled by the Assertion counter or the Active counter. Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_FILT_ENABLE_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_FILT_ENABLE_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit determines whether a digital filter eliminates pulses on the PROCHOT# signal before PROCHOT# is sampled by the Assertion counter or the Active counter. Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_ASSERT_Pos (10)                                           /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit is set when the PROCHOT Assertion Counter Register value is greater than or equal to the PROCHOT Assertion Counter Limit Register value. (R/WC) Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_ASSERT_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_ASSERT_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This bit is set when the PROCHOT Assertion Counter Register value is greater than or equal to the PROCHOT Assertion Counter Limit Register value. (R/WC) Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_PERIOD_Pos (11)                                           /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This sticky status bit is set to '1b' when the PROCHOT Period Counter transitions from '1b' to '0b.' (R/WC) Position */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_PERIOD_Msk (0x1U << PROCHOT_MON_PROCHOT_STATUS_CONTROL_PHOT_PERIOD_Pos)  /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) This sticky status bit is set to '1b' when the PROCHOT Period Counter transitions from '1b' to '0b.' (R/WC) Mask */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_Msk (0x00000C3FUL)                                 /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) Register Mask  */

/* -------- PROCHOT_MON_PROCHOT_ASSERTION_COUNT : (PROCHOT_MON Offset: 0x10) (R/W 32) PROCHOT Assertion Counter Register -------- */

typedef union
{
  struct
  {
    uint32_t ASSERTION_COUNTER:16;      /**< bit:  0..15  The PROCHOT Assertion Counter is a 16-bit up-counter that is clocked by the 100KHz and is gated and reset by the PROCHOT# input signal. This counter is used to measure a single PROCHOT assertion. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __PROCHOT_MON_PROCHOT_ASSERTION_COUNT_bits_t;
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_RESETVALUE (0x00U)                                       /**<  (PROCHOT_MON_PROCHOT_ASSERTION_COUNT) PROCHOT Assertion Counter Register  Reset Value */

#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_ASSERTION_COUNTER_Pos (0)                                            /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT) The PROCHOT Assertion Counter is a 16-bit up-counter that is clocked by the 100KHz and is gated and reset by the PROCHOT# input signal. This counter is used to measure a single PROCHOT assertion. Position */
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_ASSERTION_COUNTER_Msk (0xFFFFU << PROCHOT_MON_PROCHOT_ASSERTION_COUNT_ASSERTION_COUNTER_Pos)  /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT) The PROCHOT Assertion Counter is a 16-bit up-counter that is clocked by the 100KHz and is gated and reset by the PROCHOT# input signal. This counter is used to measure a single PROCHOT assertion. Mask */
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_ASSERTION_COUNTER(value) (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_ASSERTION_COUNTER_Msk & ((value) << PROCHOT_MON_PROCHOT_ASSERTION_COUNT_ASSERTION_COUNTER_Pos))
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_Msk (0x0000FFFFUL)                                 /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT) Register Mask  */

/* -------- PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT : (PROCHOT_MON Offset: 0x14) (R/W 32) PROCHOT Assertion Counter Register -------- */

typedef union
{
  struct
  {
    uint32_t ASSERTION_COUNT_LIMIT:16;  /**< bit:  0..15  The PROCHOT Assertion Counter Limit register is compared to the 16-bit PROCHOT Assertion Counter. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_bits_t;
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_RESETVALUE (0x00U)                                       /**<  (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT) PROCHOT Assertion Counter Register  Reset Value */

#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_ASSERTION_COUNT_LIMIT_Pos (0)                                            /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT) The PROCHOT Assertion Counter Limit register is compared to the 16-bit PROCHOT Assertion Counter. Position */
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_ASSERTION_COUNT_LIMIT_Msk (0xFFFFU << PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_ASSERTION_COUNT_LIMIT_Pos)  /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT) The PROCHOT Assertion Counter Limit register is compared to the 16-bit PROCHOT Assertion Counter. Mask */
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_ASSERTION_COUNT_LIMIT(value) (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_ASSERTION_COUNT_LIMIT_Msk & ((value) << PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_ASSERTION_COUNT_LIMIT_Pos))
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_Msk (0x0000FFFFUL)                                 /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT) Register Mask  */

/** \brief PROCHOT_MON register offsets definitions */
#define PROCHOT_MON_PHOT_CUMULATVE_COUNT_OFFSET (0x00)         /**< (PROCHOT_MON_PHOT_CUMULATVE_COUNT) PROCHOT Cumulative Count Register Offset */
#define PROCHOT_MON_PROCHOT_DC_COUNT_OFFSET (0x04)         /**< (PROCHOT_MON_PROCHOT_DC_COUNT) PROCHOT Duty Cycle Count Register Offset */
#define PROCHOT_MON_PROCHOT_DC_PERIOD_OFFSET (0x08)         /**< (PROCHOT_MON_PROCHOT_DC_PERIOD) PROCHOT Duty Cycle Period Register Offset */
#define PROCHOT_MON_PROCHOT_STATUS_CONTROL_OFFSET (0x0C)         /**< (PROCHOT_MON_PROCHOT_STATUS_CONTROL) PROCHOT Status/Control Register Offset */
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_OFFSET (0x10)         /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT) PROCHOT Assertion Counter Register Offset */
#define PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_OFFSET (0x14)         /**< (PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT) PROCHOT Assertion Counter Register Offset */

/** \brief PROCHOT_MON register API structure */
typedef struct
{  /* This block monitors the PROCHOT# signal generated by the host processor. It is designed to detect single assertions and monitor cumulative PROCHOT active time. */
  __IO  __PROCHOT_MON_PHOT_CUMULATVE_COUNT_bits_t PHOT_CUMULATVE_COUNT; /**< Offset: 0x00 (R/W  32) PROCHOT Cumulative Count Register */
  __IO  __PROCHOT_MON_PROCHOT_DC_COUNT_bits_t PROCHOT_DC_COUNT; /**< Offset: 0x04 (R/W  32) PROCHOT Duty Cycle Count Register */
  __IO  __PROCHOT_MON_PROCHOT_DC_PERIOD_bits_t PROCHOT_DC_PERIOD; /**< Offset: 0x08 (R/W  32) PROCHOT Duty Cycle Period Register */
  __IO  __PROCHOT_MON_PROCHOT_STATUS_CONTROL_bits_t PROCHOT_STATUS_CONTROL; /**< Offset: 0x0C (R/W  32) PROCHOT Status/Control Register */
  __IO  __PROCHOT_MON_PROCHOT_ASSERTION_COUNT_bits_t PROCHOT_ASSERTION_COUNT; /**< Offset: 0x10 (R/W  32) PROCHOT Assertion Counter Register */
  __IO  __PROCHOT_MON_PROCHOT_ASSERTION_COUNT_LIMIT_bits_t PROCHOT_ASSERTION_COUNT_LIMIT; /**< Offset: 0x14 (R/W  32) PROCHOT Assertion Counter Register */
} prochotmon_registers_t;
/** @}  end of This block monitors the PROCHOT# signal generated by the host processor. It is designed to detect single assertions and monitor cumulative PROCHOT active time. */

#endif /* _PIC32CX_0525SG12_PROCHOT_MON_COMPONENT_H_ */
