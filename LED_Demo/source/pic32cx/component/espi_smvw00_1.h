/**
 * \brief Component description for PIC32CX/0525SG12 ESPI_SMVW00_1
 *
 * Copyright (c) 2018 Microchip Technology Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* file generated from device description version 2018-04-24T21:15:30Z */
#ifndef _PIC32CX_0525SG12_ESPI_SMVW00_1_COMPONENT_H_
#define _PIC32CX_0525SG12_ESPI_SMVW00_1_COMPONENT_H_

/** \addtogroup PIC32CX_0525SG12_ESPI_SMVW00_1 The Virtual Wire Channel permits the System to emulate a set of wires that interconnect the system Core Logic with the EC.
 *  @{
 */
/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR ESPI_SMVW00_1 */
/* ========================================================================== */

/* -------- ESPI_SMVW00_1_SMVW00_DW0 : (ESPI_SMVW00_1 Offset: 0x00) (R/W 32) Slave-to-Master Virtual Wire 0 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW00_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW00_DW0_RESETVALUE (0xC004U)                                     /**<  (ESPI_SMVW00_1_SMVW00_DW0) Slave-to-Master Virtual Wire 0 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW00_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW00_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW00_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW00_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW00_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW00_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW00_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW00_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW00_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW00_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW00_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW00_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW00_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW00_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW00_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW00_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW00_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW00_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW00_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW00_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW00_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW00_DW1 : (ESPI_SMVW00_1 Offset: 0x04) (R/W 32) Slave-to-Master Virtual Wire 0 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW00_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW00_DW1_RESETVALUE (0x1010000U)                                  /**<  (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master Virtual Wire 0 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW00_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW00_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW00_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW00_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW00_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW00_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW00_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW00_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW00_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW00_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW00_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW00_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW00_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW01_DW0 : (ESPI_SMVW00_1 Offset: 0x08) (R/W 32) Slave-to-Master Virtual Wire 1 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW01_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW01_DW0_RESETVALUE (0x05U)                                       /**<  (ESPI_SMVW00_1_SMVW01_DW0) Slave-to-Master Virtual Wire 1 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW01_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW01_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW01_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW01_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW01_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW01_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW01_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW01_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW01_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW01_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW01_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW01_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW01_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW01_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW01_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW01_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW01_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW01_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW01_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW01_DW1 : (ESPI_SMVW00_1 Offset: 0x0c) (R/W 32) Slave-to-Master Virtual Wire 1 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW01_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW01_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master Virtual Wire 1 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW01_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW01_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW01_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW01_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW01_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW01_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW01_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW01_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW01_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW01_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW01_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW01_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW01_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW02_DW0 : (ESPI_SMVW00_1 Offset: 0x10) (R/W 32) Slave-to-Master Virtual Wire 2 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW02_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW02_DW0_RESETVALUE (0x7306U)                                     /**<  (ESPI_SMVW00_1_SMVW02_DW0) Slave-to-Master Virtual Wire 2 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW02_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW02_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW02_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW02_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW02_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW02_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW02_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW02_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW02_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW02_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW02_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW02_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW02_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW02_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW02_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW02_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW02_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW02_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW02_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW02_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW02_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW02_DW1 : (ESPI_SMVW00_1 Offset: 0x14) (R/W 32) Slave-to-Master Virtual Wire 2 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW02_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW02_DW1_RESETVALUE (0x10101U)                                    /**<  (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master Virtual Wire 2 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW02_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW02_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW02_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW02_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW02_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW02_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW02_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW02_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW02_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW02_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW02_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW02_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW02_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW03_DW0 : (ESPI_SMVW00_1 Offset: 0x18) (R/W 32) Slave-to-Master Virtual Wire 3 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW03_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW03_DW0_RESETVALUE (0x40U)                                       /**<  (ESPI_SMVW00_1_SMVW03_DW0) Slave-to-Master Virtual Wire 3 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW03_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW03_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW03_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW03_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW03_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW03_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW03_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW03_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW03_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW03_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW03_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW03_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW03_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW03_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW03_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW03_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW03_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW03_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW03_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW03_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW03_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW03_DW1 : (ESPI_SMVW00_1 Offset: 0x1c) (R/W 32) Slave-to-Master Virtual Wire 3 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW03_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW03_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master Virtual Wire 3 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW03_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW03_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW03_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW03_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW03_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW03_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW03_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW03_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW03_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW03_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW03_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW03_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW03_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW04_DW0 : (ESPI_SMVW00_1 Offset: 0x20) (R/W 32) Slave-to-Master Virtual Wire 4 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW04_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW04_DW0_RESETVALUE (0x45U)                                       /**<  (ESPI_SMVW00_1_SMVW04_DW0) Slave-to-Master Virtual Wire 4 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW04_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW04_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW04_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW04_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW04_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW04_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW04_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW04_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW04_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW04_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW04_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW04_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW04_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW04_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW04_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW04_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW04_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW04_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW04_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW04_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW04_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW04_DW1 : (ESPI_SMVW00_1 Offset: 0x24) (R/W 32) Slave-to-Master Virtual Wire 4 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW04_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW04_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master Virtual Wire 4 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW04_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW04_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW04_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW04_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW04_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW04_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW04_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW04_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW04_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW04_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW04_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW04_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW04_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW05_DW0 : (ESPI_SMVW00_1 Offset: 0x28) (R/W 32) Slave-to-Master Virtual Wire 5 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW05_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW05_DW0_RESETVALUE (0x46U)                                       /**<  (ESPI_SMVW00_1_SMVW05_DW0) Slave-to-Master Virtual Wire 5 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW05_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW05_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW05_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW05_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW05_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW05_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW05_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW05_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW05_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW05_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW05_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW05_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW05_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW05_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW05_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW05_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW05_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW05_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW05_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW05_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW05_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW05_DW1 : (ESPI_SMVW00_1 Offset: 0x2c) (R/W 32) Slave-to-Master Virtual Wire 5 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW05_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW05_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master Virtual Wire 5 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW05_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW05_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW05_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW05_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW05_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW05_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW05_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW05_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW05_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW05_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW05_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW05_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW05_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW06_DW0 : (ESPI_SMVW00_1 Offset: 0x30) (R/W 32) Slave-to-Master Virtual Wire 6 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW06_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW06_DW0_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW06_DW0) Slave-to-Master Virtual Wire 6 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW06_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW06_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW06_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW06_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW06_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW06_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW06_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW06_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW06_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW06_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW06_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW06_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW06_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW06_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW06_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW06_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW06_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW06_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW06_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW06_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW06_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW06_DW1 : (ESPI_SMVW00_1 Offset: 0x34) (R/W 32) Slave-to-Master Virtual Wire 6 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW06_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW06_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master Virtual Wire 6 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW06_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW06_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW06_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW06_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW06_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW06_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW06_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW06_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW06_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW06_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW06_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW06_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW06_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW07_DW0 : (ESPI_SMVW00_1 Offset: 0x38) (R/W 32) Slave-to-Master Virtual Wire 7 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW07_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW07_DW0_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW07_DW0) Slave-to-Master Virtual Wire 7 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW07_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW07_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW07_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW07_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW07_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW07_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW07_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW07_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW07_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW07_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW07_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW07_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW07_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW07_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW07_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW07_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW07_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW07_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW07_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW07_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW07_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW07_DW1 : (ESPI_SMVW00_1 Offset: 0x3c) (R/W 32) Slave-to-Master Virtual Wire 7 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW07_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW07_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master Virtual Wire 7 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW07_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW07_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW07_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW07_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW07_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW07_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW07_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW07_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW07_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW07_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW07_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW07_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW07_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW08_DW0 : (ESPI_SMVW00_1 Offset: 0x40) (R/W 32) Slave-to-Master Virtual Wire 8 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW08_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW08_DW0_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW08_DW0) Slave-to-Master Virtual Wire 8 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW08_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW08_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW08_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW08_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW08_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW08_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW08_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW08_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW08_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW08_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW08_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW08_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW08_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW08_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW08_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW08_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW08_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW08_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW08_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW08_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW08_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW08_DW1 : (ESPI_SMVW00_1 Offset: 0x44) (R/W 32) Slave-to-Master Virtual Wire 8 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW08_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW08_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master Virtual Wire 8 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW08_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW08_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW08_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW08_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW08_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW08_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW08_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW08_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW08_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW08_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW08_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW08_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW08_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW09_DW0 : (ESPI_SMVW00_1 Offset: 0x48) (R/W 32) Slave-to-Master Virtual Wire 9 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW09_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW09_DW0_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW09_DW0) Slave-to-Master Virtual Wire 9 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW09_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW09_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW09_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW09_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW09_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW09_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW09_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW09_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW09_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW09_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW09_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW09_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW09_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW09_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW09_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW09_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW09_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW09_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW09_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW09_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW09_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW09_DW1 : (ESPI_SMVW00_1 Offset: 0x4c) (R/W 32) Slave-to-Master Virtual Wire 9 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW09_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW09_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master Virtual Wire 9 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW09_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW09_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW09_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW09_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW09_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW09_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW09_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW09_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW09_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW09_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW09_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW09_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW09_DW1_SRC_Pos))

/* -------- ESPI_SMVW00_1_SMVW10_DW0 : (ESPI_SMVW00_1 Offset: 0x50) (R/W 32) Slave-to-Master Virtual Wire 10 Register (DWord 0) -------- */

typedef union
{
  struct
  {
    uint32_t INDEX:8;                   /**< bit:   0..7  The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. */
    uint32_t STOM_SRC:2;                /**< bit:   8..9  This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. */
    uint32_t :2;                        /**< bit: 10..11  Reserved                                      */
    uint32_t STOM_R_STATE:4;            /**< bit: 12..15  The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. */
    uint32_t CHANGE0:1;                 /**< bit:     16  This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE1:1;                 /**< bit:     17  This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE2:1;                 /**< bit:     18  This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t CHANGE3:1;                 /**< bit:     19  This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  struct
  {
    uint32_t :16;                       /**< bit:  0..15  Reserved                                      */
    uint32_t CHANGE:4;                  /**< bit: 16..19  This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW10_DW0_bits_t;
#define ESPI_SMVW00_1_SMVW10_DW0_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW10_DW0) Slave-to-Master Virtual Wire 10 Register (DWord 0)  Reset Value */

#define ESPI_SMVW00_1_SMVW10_DW0_INDEX_Pos    (0)                                            /**< (ESPI_SMVW00_1_SMVW10_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_INDEX_Msk    (0xFFU << ESPI_SMVW00_1_SMVW10_DW0_INDEX_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) The Index for SRC0, SRC1, SRC2 and SRC3. A write to this register that changes the value of any one or more of SRC0, SRC1,\n      SRC2 or SRC3 will generate a Slave-to-Master Virtual Wire transaction with this index. Setting the INDEX field to 0 disables the register\n      from generating any Virtual Wire traffic to the Master. Setting the INDEX field to 1 is illegal, since INDEX=1 is reserved for Serial IRQ. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_INDEX(value) (ESPI_SMVW00_1_SMVW10_DW0_INDEX_Msk & ((value) << ESPI_SMVW00_1_SMVW10_DW0_INDEX_Pos))
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Pos (8)                                            /**< (ESPI_SMVW00_1_SMVW10_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Msk (0x3U << ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) This field determines which reset signal in addition to RESET_SYS resets SRC[3:0] in this register:\n      3=PLTRST\n      2=RESET_SIO\n      1=RESET_SYS. This is the only reset signal that will reset the SRC fields.\n      0=RESET_ESPI. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC(value) (ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW10_DW0_STOM_SRC_Pos))
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Pos (12)                                           /**< (ESPI_SMVW00_1_SMVW10_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Msk (0xFU << ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) The four bits in this field are loaded into SRC0, SRC1, SRC2 and SRC3 when the reset signal selected by S2M RESET SRC is\n      asserted. If STOM_SRC is set for RESET_SYS, the SRC bits are set to the default value of this field, rather than its programmed value,\n      since this field is also reset on RESET_SYS. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE(value) (ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Msk & ((value) << ESPI_SMVW00_1_SMVW10_DW0_STOM_R_STATE_Pos))
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE0_Pos  (16)                                           /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE0_Msk  (0x1U << ESPI_SMVW00_1_SMVW10_DW0_CHANGE0_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit0 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE1_Pos  (17)                                           /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE1_Msk  (0x1U << ESPI_SMVW00_1_SMVW10_DW0_CHANGE1_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit1 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE2_Pos  (18)                                           /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE2_Msk  (0x1U << ESPI_SMVW00_1_SMVW10_DW0_CHANGE2_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit2 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE3_Pos  (19)                                           /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Position */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE3_Msk  (0x1U << ESPI_SMVW00_1_SMVW10_DW0_CHANGE3_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0) This bit is set to 1 whenever the value in Bit3 in this register changes. This bit is set to 0 whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to 0 when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. Mask */
#define ESPI_SMVW00_1_SMVW10_DW0_Msk          (0x000FF3FFUL)                                 /**< (ESPI_SMVW00_1_SMVW10_DW0) Register Mask  */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE_Pos   (16)                                           /**< (ESPI_SMVW00_1_SMVW10_DW0 Position) This bit is set to x whenever the value in Bit3 in this register changes. This bit is set to x whenever the 4 data bits in\n      this register are transmitted to the Host by a Slave-to-Master Virtual Wire transaction. It is also set to x when this entire register is\n      reset, ignoring any change in the data bit value caused by the reset event. */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE_Msk   (0xFU << ESPI_SMVW00_1_SMVW10_DW0_CHANGE_Pos)  /**< (ESPI_SMVW00_1_SMVW10_DW0 Mask) CHANGE */
#define ESPI_SMVW00_1_SMVW10_DW0_CHANGE(value) (ESPI_SMVW00_1_SMVW10_DW0_CHANGE_Msk & ((value) << ESPI_SMVW00_1_SMVW10_DW0_CHANGE_Pos))

/* -------- ESPI_SMVW00_1_SMVW10_DW1 : (ESPI_SMVW00_1 Offset: 0x54) (R/W 32) Slave-to-Master Virtual Wire 10 Register (DWord 1) -------- */

typedef union
{
  struct
  {
    uint32_t SRC0:1;                    /**< bit:      0  Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:   1..7  Reserved                                      */
    uint32_t SRC1:1;                    /**< bit:      8  Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit:  9..15  Reserved                                      */
    uint32_t SRC2:1;                    /**< bit:     16  Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 17..23  Reserved                                      */
    uint32_t SRC3:1;                    /**< bit:     24  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :7;                        /**< bit: 25..31  Reserved                                      */
  };
  struct
  {
    uint32_t SRC:4;                     /**< bit:   0..3  Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
    uint32_t :28;                       /**< bit:  4..31  Reserved                                      */
  };
  uint32_t w;
} __ESPI_SMVW00_1_SMVW10_DW1_bits_t;
#define ESPI_SMVW00_1_SMVW10_DW1_RESETVALUE (0x00U)                                       /**<  (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master Virtual Wire 10 Register (DWord 1)  Reset Value */

#define ESPI_SMVW00_1_SMVW10_DW1_SRC0_Pos     (0)                                            /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC0_Msk     (0x1U << ESPI_SMVW00_1_SMVW10_DW1_SRC0_Pos)    /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 0 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC1_Pos     (8)                                            /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC1_Msk     (0x1U << ESPI_SMVW00_1_SMVW10_DW1_SRC1_Pos)    /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 1 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC2_Pos     (16)                                           /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC2_Msk     (0x1U << ESPI_SMVW00_1_SMVW10_DW1_SRC2_Pos)    /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 2 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC3_Pos     (24)                                           /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Position */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC3_Msk     (0x1U << ESPI_SMVW00_1_SMVW10_DW1_SRC3_Pos)    /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. Mask */
#define ESPI_SMVW00_1_SMVW10_DW1_Msk          (0x01010101UL)                                 /**< (ESPI_SMVW00_1_SMVW10_DW1) Register Mask  */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC_Pos      (0)                                            /**< (ESPI_SMVW00_1_SMVW10_DW1 Position) Slave-to-Master data for Bit Position 3 for the virtual wire associated with the index defined by INDEX. The most recent value\n      of this bit is transmitted to the Master, even if the bit changes multiple times before the Master issues the Virtual Wire read transaction. */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC_Msk      (0xFU << ESPI_SMVW00_1_SMVW10_DW1_SRC_Pos)     /**< (ESPI_SMVW00_1_SMVW10_DW1 Mask) SRC */
#define ESPI_SMVW00_1_SMVW10_DW1_SRC(value)   (ESPI_SMVW00_1_SMVW10_DW1_SRC_Msk & ((value) << ESPI_SMVW00_1_SMVW10_DW1_SRC_Pos))

/** \brief ESPI_SMVW00_1 register offsets definitions */
#define ESPI_SMVW00_1_SMVW00_DW0_OFFSET (0x00)         /**< (ESPI_SMVW00_1_SMVW00_DW0) Slave-to-Master Virtual Wire 0 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW00_DW1_OFFSET (0x04)         /**< (ESPI_SMVW00_1_SMVW00_DW1) Slave-to-Master Virtual Wire 0 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW01_DW0_OFFSET (0x08)         /**< (ESPI_SMVW00_1_SMVW01_DW0) Slave-to-Master Virtual Wire 1 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW01_DW1_OFFSET (0x0C)         /**< (ESPI_SMVW00_1_SMVW01_DW1) Slave-to-Master Virtual Wire 1 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW02_DW0_OFFSET (0x10)         /**< (ESPI_SMVW00_1_SMVW02_DW0) Slave-to-Master Virtual Wire 2 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW02_DW1_OFFSET (0x14)         /**< (ESPI_SMVW00_1_SMVW02_DW1) Slave-to-Master Virtual Wire 2 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW03_DW0_OFFSET (0x18)         /**< (ESPI_SMVW00_1_SMVW03_DW0) Slave-to-Master Virtual Wire 3 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW03_DW1_OFFSET (0x1C)         /**< (ESPI_SMVW00_1_SMVW03_DW1) Slave-to-Master Virtual Wire 3 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW04_DW0_OFFSET (0x20)         /**< (ESPI_SMVW00_1_SMVW04_DW0) Slave-to-Master Virtual Wire 4 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW04_DW1_OFFSET (0x24)         /**< (ESPI_SMVW00_1_SMVW04_DW1) Slave-to-Master Virtual Wire 4 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW05_DW0_OFFSET (0x28)         /**< (ESPI_SMVW00_1_SMVW05_DW0) Slave-to-Master Virtual Wire 5 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW05_DW1_OFFSET (0x2C)         /**< (ESPI_SMVW00_1_SMVW05_DW1) Slave-to-Master Virtual Wire 5 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW06_DW0_OFFSET (0x30)         /**< (ESPI_SMVW00_1_SMVW06_DW0) Slave-to-Master Virtual Wire 6 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW06_DW1_OFFSET (0x34)         /**< (ESPI_SMVW00_1_SMVW06_DW1) Slave-to-Master Virtual Wire 6 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW07_DW0_OFFSET (0x38)         /**< (ESPI_SMVW00_1_SMVW07_DW0) Slave-to-Master Virtual Wire 7 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW07_DW1_OFFSET (0x3C)         /**< (ESPI_SMVW00_1_SMVW07_DW1) Slave-to-Master Virtual Wire 7 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW08_DW0_OFFSET (0x40)         /**< (ESPI_SMVW00_1_SMVW08_DW0) Slave-to-Master Virtual Wire 8 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW08_DW1_OFFSET (0x44)         /**< (ESPI_SMVW00_1_SMVW08_DW1) Slave-to-Master Virtual Wire 8 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW09_DW0_OFFSET (0x48)         /**< (ESPI_SMVW00_1_SMVW09_DW0) Slave-to-Master Virtual Wire 9 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW09_DW1_OFFSET (0x4C)         /**< (ESPI_SMVW00_1_SMVW09_DW1) Slave-to-Master Virtual Wire 9 Register (DWord 1) Offset */
#define ESPI_SMVW00_1_SMVW10_DW0_OFFSET (0x50)         /**< (ESPI_SMVW00_1_SMVW10_DW0) Slave-to-Master Virtual Wire 10 Register (DWord 0) Offset */
#define ESPI_SMVW00_1_SMVW10_DW1_OFFSET (0x54)         /**< (ESPI_SMVW00_1_SMVW10_DW1) Slave-to-Master Virtual Wire 10 Register (DWord 1) Offset */

/** \brief ESPI_SMVW00_1 register API structure */
typedef struct
{  /* The Virtual Wire Channel permits the System to emulate a set of wires that interconnect the system Core Logic with the EC. */
  __IO  __ESPI_SMVW00_1_SMVW00_DW0_bits_t SMVW00_DW0;    /**< Offset: 0x00 (R/W  32) Slave-to-Master Virtual Wire 0 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW00_DW1_bits_t SMVW00_DW1;    /**< Offset: 0x04 (R/W  32) Slave-to-Master Virtual Wire 0 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW01_DW0_bits_t SMVW01_DW0;    /**< Offset: 0x08 (R/W  32) Slave-to-Master Virtual Wire 1 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW01_DW1_bits_t SMVW01_DW1;    /**< Offset: 0x0C (R/W  32) Slave-to-Master Virtual Wire 1 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW02_DW0_bits_t SMVW02_DW0;    /**< Offset: 0x10 (R/W  32) Slave-to-Master Virtual Wire 2 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW02_DW1_bits_t SMVW02_DW1;    /**< Offset: 0x14 (R/W  32) Slave-to-Master Virtual Wire 2 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW03_DW0_bits_t SMVW03_DW0;    /**< Offset: 0x18 (R/W  32) Slave-to-Master Virtual Wire 3 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW03_DW1_bits_t SMVW03_DW1;    /**< Offset: 0x1C (R/W  32) Slave-to-Master Virtual Wire 3 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW04_DW0_bits_t SMVW04_DW0;    /**< Offset: 0x20 (R/W  32) Slave-to-Master Virtual Wire 4 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW04_DW1_bits_t SMVW04_DW1;    /**< Offset: 0x24 (R/W  32) Slave-to-Master Virtual Wire 4 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW05_DW0_bits_t SMVW05_DW0;    /**< Offset: 0x28 (R/W  32) Slave-to-Master Virtual Wire 5 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW05_DW1_bits_t SMVW05_DW1;    /**< Offset: 0x2C (R/W  32) Slave-to-Master Virtual Wire 5 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW06_DW0_bits_t SMVW06_DW0;    /**< Offset: 0x30 (R/W  32) Slave-to-Master Virtual Wire 6 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW06_DW1_bits_t SMVW06_DW1;    /**< Offset: 0x34 (R/W  32) Slave-to-Master Virtual Wire 6 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW07_DW0_bits_t SMVW07_DW0;    /**< Offset: 0x38 (R/W  32) Slave-to-Master Virtual Wire 7 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW07_DW1_bits_t SMVW07_DW1;    /**< Offset: 0x3C (R/W  32) Slave-to-Master Virtual Wire 7 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW08_DW0_bits_t SMVW08_DW0;    /**< Offset: 0x40 (R/W  32) Slave-to-Master Virtual Wire 8 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW08_DW1_bits_t SMVW08_DW1;    /**< Offset: 0x44 (R/W  32) Slave-to-Master Virtual Wire 8 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW09_DW0_bits_t SMVW09_DW0;    /**< Offset: 0x48 (R/W  32) Slave-to-Master Virtual Wire 9 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW09_DW1_bits_t SMVW09_DW1;    /**< Offset: 0x4C (R/W  32) Slave-to-Master Virtual Wire 9 Register (DWord 1) */
  __IO  __ESPI_SMVW00_1_SMVW10_DW0_bits_t SMVW10_DW0;    /**< Offset: 0x50 (R/W  32) Slave-to-Master Virtual Wire 10 Register (DWord 0) */
  __IO  __ESPI_SMVW00_1_SMVW10_DW1_bits_t SMVW10_DW1;    /**< Offset: 0x54 (R/W  32) Slave-to-Master Virtual Wire 10 Register (DWord 1) */
} espismvw001_registers_t;
/** @}  end of The Virtual Wire Channel permits the System to emulate a set of wires that interconnect the system Core Logic with the EC. */

#endif /* _PIC32CX_0525SG12_ESPI_SMVW00_1_COMPONENT_H_ */
