/**
 * \brief Component description for PIC32CX/0525SG12 SAFBC
 *
 * Copyright (c) 2018 Microchip Technology Inc.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/* file generated from device description version 2018-04-24T21:15:30Z */
#ifndef _PIC32CX_0525SG12_SAFBC_COMPONENT_H_
#define _PIC32CX_0525SG12_SAFBC_COMPONENT_H_

/** \addtogroup PIC32CX_0525SG12_SAFBC SAF BRIDGE COMPONENT
 *  @{
 */
/* ========================================================================== */
/**  SOFTWARE API DEFINITION FOR SAFBC */
/* ========================================================================== */

/* -------- SAFBC_EC_LEN_TAG_CMD : (SAFBC Offset: 0x18) (R/W 32) This register defines the command type and length of transfers requested by EC firmware -------- */

typedef union
{
  struct
  {
    uint32_t EC_PUT_CMD:8;              /**< bit:   0..7  This field must contain the value 0Ah; that is, the eSPI command                       PUT_FLASH_NP. */
    uint32_t EC_CTYPE_CMD:8;            /**< bit:  8..15  This field encodes the operation requested:                       00h = Read                       01h = Write (Page Program)                       02h = Erase                       Other encodings are undefined */
    uint32_t :8;                        /**< bit: 16..23  Reserved                                      */
    uint32_t EC_LENGTH:8;               /**< bit: 24..31  This field contains the Length field for all requests.                       Read or Write: The length in bytes of the data transfer, to or from                       the SRAM buffer. Must be in the range 1 -- 64 (01h -- 40h).                       Erase: Must encode an eSPI-defined Erase Block Size:                       00h = 4K                       01h = 32K                       02h = 64K                       Other encodings are undefined. */
  };
  uint32_t w;
} __SAFBC_EC_LEN_TAG_CMD_bits_t;
#define SAFBC_EC_LEN_TAG_CMD_RESETVALUE     (0x00U)                                       /**<  (SAFBC_EC_LEN_TAG_CMD) This register defines the command type and length of transfers requested by EC firmware  Reset Value */

#define SAFBC_EC_LEN_TAG_CMD_EC_PUT_CMD_Pos   (0)                                            /**< (SAFBC_EC_LEN_TAG_CMD) This field must contain the value 0Ah; that is, the eSPI command                       PUT_FLASH_NP. Position */
#define SAFBC_EC_LEN_TAG_CMD_EC_PUT_CMD_Msk   (0xFFU << SAFBC_EC_LEN_TAG_CMD_EC_PUT_CMD_Pos)  /**< (SAFBC_EC_LEN_TAG_CMD) This field must contain the value 0Ah; that is, the eSPI command                       PUT_FLASH_NP. Mask */
#define SAFBC_EC_LEN_TAG_CMD_EC_PUT_CMD(value) (SAFBC_EC_LEN_TAG_CMD_EC_PUT_CMD_Msk & ((value) << SAFBC_EC_LEN_TAG_CMD_EC_PUT_CMD_Pos))
#define SAFBC_EC_LEN_TAG_CMD_EC_CTYPE_CMD_Pos (8)                                            /**< (SAFBC_EC_LEN_TAG_CMD) This field encodes the operation requested:                       00h = Read                       01h = Write (Page Program)                       02h = Erase                       Other encodings are undefined Position */
#define SAFBC_EC_LEN_TAG_CMD_EC_CTYPE_CMD_Msk (0xFFU << SAFBC_EC_LEN_TAG_CMD_EC_CTYPE_CMD_Pos)  /**< (SAFBC_EC_LEN_TAG_CMD) This field encodes the operation requested:                       00h = Read                       01h = Write (Page Program)                       02h = Erase                       Other encodings are undefined Mask */
#define SAFBC_EC_LEN_TAG_CMD_EC_CTYPE_CMD(value) (SAFBC_EC_LEN_TAG_CMD_EC_CTYPE_CMD_Msk & ((value) << SAFBC_EC_LEN_TAG_CMD_EC_CTYPE_CMD_Pos))
#define SAFBC_EC_LEN_TAG_CMD_EC_LENGTH_Pos    (24)                                           /**< (SAFBC_EC_LEN_TAG_CMD) This field contains the Length field for all requests.                       Read or Write: The length in bytes of the data transfer, to or from                       the SRAM buffer. Must be in the range 1 -- 64 (01h -- 40h).                       Erase: Must encode an eSPI-defined Erase Block Size:                       00h = 4K                       01h = 32K                       02h = 64K                       Other encodings are undefined. Position */
#define SAFBC_EC_LEN_TAG_CMD_EC_LENGTH_Msk    (0xFFU << SAFBC_EC_LEN_TAG_CMD_EC_LENGTH_Pos)  /**< (SAFBC_EC_LEN_TAG_CMD) This field contains the Length field for all requests.                       Read or Write: The length in bytes of the data transfer, to or from                       the SRAM buffer. Must be in the range 1 -- 64 (01h -- 40h).                       Erase: Must encode an eSPI-defined Erase Block Size:                       00h = 4K                       01h = 32K                       02h = 64K                       Other encodings are undefined. Mask */
#define SAFBC_EC_LEN_TAG_CMD_EC_LENGTH(value) (SAFBC_EC_LEN_TAG_CMD_EC_LENGTH_Msk & ((value) << SAFBC_EC_LEN_TAG_CMD_EC_LENGTH_Pos))
#define SAFBC_EC_LEN_TAG_CMD_Msk              (0xFF00FFFFUL)                                 /**< (SAFBC_EC_LEN_TAG_CMD) Register Mask  */

/* -------- SAFBC_EC_FLASH_ADD : (SAFBC Offset: 0x1c) (R/W 32) This register hold the Flash Space address to be accessed by the current command from EC firmware. -------- */

typedef union
{
  struct
  {
    uint32_t FLASH_ADDR:32;             /**< bit:  0..31  FLASH_ADDR: This field holds the Flash address to be accessed. */
  };
  uint32_t w;
} __SAFBC_EC_FLASH_ADD_bits_t;
#define SAFBC_EC_FLASH_ADD_RESETVALUE       (0x00U)                                       /**<  (SAFBC_EC_FLASH_ADD) This register hold the Flash Space address to be accessed by the current command from EC firmware.  Reset Value */

#define SAFBC_EC_FLASH_ADD_FLASH_ADDR_Pos     (0)                                            /**< (SAFBC_EC_FLASH_ADD) FLASH_ADDR: This field holds the Flash address to be accessed. Position */
#define SAFBC_EC_FLASH_ADD_FLASH_ADDR_Msk     (0xFFFFFFFFU << SAFBC_EC_FLASH_ADD_FLASH_ADDR_Pos)  /**< (SAFBC_EC_FLASH_ADD) FLASH_ADDR: This field holds the Flash address to be accessed. Mask */
#define SAFBC_EC_FLASH_ADD_FLASH_ADDR(value)  (SAFBC_EC_FLASH_ADD_FLASH_ADDR_Msk & ((value) << SAFBC_EC_FLASH_ADD_FLASH_ADDR_Pos))
#define SAFBC_EC_FLASH_ADD_Msk                (0xFFFFFFFFUL)                                 /**< (SAFBC_EC_FLASH_ADD) Register Mask  */

/* -------- SAFBC_EC_START : (SAFBC Offset: 0x20) (R/W 32) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer. -------- */

typedef union
{
  struct
  {
    uint32_t START:1;                   /**< bit:      0  This bit is written with '1' to start a new request, but always appears                   '0' when being read. Writing '1' to this bit immediately sets the                   EC_BUSY bit to '1' as an acknowledgement that the request is being serviced.                   Writing '1' to the START bit again, while the EC_BUSY bit is                   already '1' will do nothing except to set the START_OVERFLOW                   error status bit to '1' and the request already in service will complete                   normally except for the START_OVERFLOW=1 status indication. */
    uint32_t :31;                       /**< bit:  1..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_EC_START_bits_t;
#define SAFBC_EC_START_RESETVALUE           (0x00U)                                       /**<  (SAFBC_EC_START) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer.  Reset Value */

#define SAFBC_EC_START_START_Pos              (0)                                            /**< (SAFBC_EC_START) This bit is written with '1' to start a new request, but always appears                   '0' when being read. Writing '1' to this bit immediately sets the                   EC_BUSY bit to '1' as an acknowledgement that the request is being serviced.                   Writing '1' to the START bit again, while the EC_BUSY bit is                   already '1' will do nothing except to set the START_OVERFLOW                   error status bit to '1' and the request already in service will complete                   normally except for the START_OVERFLOW=1 status indication. Position */
#define SAFBC_EC_START_START_Msk              (0x1U << SAFBC_EC_START_START_Pos)             /**< (SAFBC_EC_START) This bit is written with '1' to start a new request, but always appears                   '0' when being read. Writing '1' to this bit immediately sets the                   EC_BUSY bit to '1' as an acknowledgement that the request is being serviced.                   Writing '1' to the START bit again, while the EC_BUSY bit is                   already '1' will do nothing except to set the START_OVERFLOW                   error status bit to '1' and the request already in service will complete                   normally except for the START_OVERFLOW=1 status indication. Mask */
#define SAFBC_EC_START_Msk                    (0x00000001UL)                                 /**< (SAFBC_EC_START) Register Mask  */

/* -------- SAFBC_EC_AHB_ADD : (SAFBC Offset: 0x24) (R/W 32) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access. -------- */

typedef union
{
  struct
  {
    uint32_t :2;                        /**< bit:   0..1  Reserved                                      */
    uint32_t BUF_ADDR:30;               /**< bit:  2..31  This field holds bits [31:2] of the SRAM buffer address.                   Bits[1:0] of the address are fixed at 00. */
  };
  uint32_t w;
} __SAFBC_EC_AHB_ADD_bits_t;
#define SAFBC_EC_AHB_ADD_RESETVALUE         (0x00U)                                       /**<  (SAFBC_EC_AHB_ADD) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access.  Reset Value */

#define SAFBC_EC_AHB_ADD_BUF_ADDR_Pos         (2)                                            /**< (SAFBC_EC_AHB_ADD) This field holds bits [31:2] of the SRAM buffer address.                   Bits[1:0] of the address are fixed at 00. Position */
#define SAFBC_EC_AHB_ADD_BUF_ADDR_Msk         (0x3FFFFFFFU << SAFBC_EC_AHB_ADD_BUF_ADDR_Pos)  /**< (SAFBC_EC_AHB_ADD) This field holds bits [31:2] of the SRAM buffer address.                   Bits[1:0] of the address are fixed at 00. Mask */
#define SAFBC_EC_AHB_ADD_BUF_ADDR(value)      (SAFBC_EC_AHB_ADD_BUF_ADDR_Msk & ((value) << SAFBC_EC_AHB_ADD_BUF_ADDR_Pos))
#define SAFBC_EC_AHB_ADD_Msk                  (0xFFFFFFFCUL)                                 /**< (SAFBC_EC_AHB_ADD) Register Mask  */

/* -------- SAFBC_EC_DONE_STATUS : (SAFBC Offset: 0x28) (R/W 32) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request. -------- */

typedef union
{
  struct
  {
    uint32_t DONE:1;                    /**< bit:      0  This bit is set to '1' by hardware to indicate the end of a requested access by the EC.        It can be enabled to trigger an interrupt when '1'. Writing a '1' clears this bit and the interrupt source.        This is R/WC. */
    uint32_t DONE_TST:1;                /**< bit:      1  This bit is set to '1' by hardware during a requested access by the EC. It has no usage        except for possible diagnostic purposes, but should be cleared (with the rest of this register)         by writing '1' before starting any new access.        This is R/WC. */
    uint32_t TIMEOUT:1;                 /**< bit:      2  This bit indicates that an Erase or Write request from the EC has failed because the Flash        has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t OUT_OF_RANGE:1;            /**< bit:      3  This bit indicates that a request from the EC has been rejected because it is beyond the        physical limits of the attached Flash devices, as declared in the Size Limit and Threshold        Registers. This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t ACCESS_VIOLATION:1;        /**< bit:      4  This bit indicates that a request from the EC has been rejected because it violates the        Protection Register settings. This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t BOUNDARY_4K:1;             /**< bit:      5  This bit indicates that a Read request from the EC has been rejected because it has attempted         to cross a 4K Flash address boundary. This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t ERASE_SIZE:1;              /**< bit:      6  This bit indicates that an invalid Erase Block Size has been specified in an Erase request        from the EC. This error is detected by seeing 00h in the specific Erase Size opcode field. This         bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t START_OVERFLOW:1;          /**< bit:      7  This bit indicates that an access was already in progress when a new access was        requested by writing '1' to the START bit. Such a request is ignored except to set this bit.        This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t BAD_REQUEST:1;             /**< bit:      8  This bit indicates that an invalid Request code has been specified in the Portal        Command Register at the time the START bit was set to trigger it.        This bit is cleared by writing '1' to its position.         This is R/WC. */
    uint32_t :23;                       /**< bit:  9..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_EC_DONE_STATUS_bits_t;
#define SAFBC_EC_DONE_STATUS_RESETVALUE     (0x00U)                                       /**<  (SAFBC_EC_DONE_STATUS) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request.  Reset Value */

#define SAFBC_EC_DONE_STATUS_DONE_Pos         (0)                                            /**< (SAFBC_EC_DONE_STATUS) This bit is set to '1' by hardware to indicate the end of a requested access by the EC.        It can be enabled to trigger an interrupt when '1'. Writing a '1' clears this bit and the interrupt source.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_DONE_Msk         (0x1U << SAFBC_EC_DONE_STATUS_DONE_Pos)        /**< (SAFBC_EC_DONE_STATUS) This bit is set to '1' by hardware to indicate the end of a requested access by the EC.        It can be enabled to trigger an interrupt when '1'. Writing a '1' clears this bit and the interrupt source.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_DONE_TST_Pos     (1)                                            /**< (SAFBC_EC_DONE_STATUS) This bit is set to '1' by hardware during a requested access by the EC. It has no usage        except for possible diagnostic purposes, but should be cleared (with the rest of this register)         by writing '1' before starting any new access.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_DONE_TST_Msk     (0x1U << SAFBC_EC_DONE_STATUS_DONE_TST_Pos)    /**< (SAFBC_EC_DONE_STATUS) This bit is set to '1' by hardware during a requested access by the EC. It has no usage        except for possible diagnostic purposes, but should be cleared (with the rest of this register)         by writing '1' before starting any new access.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_TIMEOUT_Pos      (2)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an Erase or Write request from the EC has failed because the Flash        has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_TIMEOUT_Msk      (0x1U << SAFBC_EC_DONE_STATUS_TIMEOUT_Pos)     /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an Erase or Write request from the EC has failed because the Flash        has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_OUT_OF_RANGE_Pos (3)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that a request from the EC has been rejected because it is beyond the        physical limits of the attached Flash devices, as declared in the Size Limit and Threshold        Registers. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_OUT_OF_RANGE_Msk (0x1U << SAFBC_EC_DONE_STATUS_OUT_OF_RANGE_Pos)  /**< (SAFBC_EC_DONE_STATUS) This bit indicates that a request from the EC has been rejected because it is beyond the        physical limits of the attached Flash devices, as declared in the Size Limit and Threshold        Registers. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_ACCESS_VIOLATION_Pos (4)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that a request from the EC has been rejected because it violates the        Protection Register settings. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_ACCESS_VIOLATION_Msk (0x1U << SAFBC_EC_DONE_STATUS_ACCESS_VIOLATION_Pos)  /**< (SAFBC_EC_DONE_STATUS) This bit indicates that a request from the EC has been rejected because it violates the        Protection Register settings. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_BOUNDARY_4K_Pos  (5)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that a Read request from the EC has been rejected because it has attempted         to cross a 4K Flash address boundary. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_BOUNDARY_4K_Msk  (0x1U << SAFBC_EC_DONE_STATUS_BOUNDARY_4K_Pos)  /**< (SAFBC_EC_DONE_STATUS) This bit indicates that a Read request from the EC has been rejected because it has attempted         to cross a 4K Flash address boundary. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_ERASE_SIZE_Pos   (6)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an invalid Erase Block Size has been specified in an Erase request        from the EC. This error is detected by seeing 00h in the specific Erase Size opcode field. This         bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_ERASE_SIZE_Msk   (0x1U << SAFBC_EC_DONE_STATUS_ERASE_SIZE_Pos)  /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an invalid Erase Block Size has been specified in an Erase request        from the EC. This error is detected by seeing 00h in the specific Erase Size opcode field. This         bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_START_OVERFLOW_Pos (7)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an access was already in progress when a new access was        requested by writing '1' to the START bit. Such a request is ignored except to set this bit.        This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_START_OVERFLOW_Msk (0x1U << SAFBC_EC_DONE_STATUS_START_OVERFLOW_Pos)  /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an access was already in progress when a new access was        requested by writing '1' to the START bit. Such a request is ignored except to set this bit.        This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_BAD_REQUEST_Pos  (8)                                            /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an invalid Request code has been specified in the Portal        Command Register at the time the START bit was set to trigger it.        This bit is cleared by writing '1' to its position.         This is R/WC. Position */
#define SAFBC_EC_DONE_STATUS_BAD_REQUEST_Msk  (0x1U << SAFBC_EC_DONE_STATUS_BAD_REQUEST_Pos)  /**< (SAFBC_EC_DONE_STATUS) This bit indicates that an invalid Request code has been specified in the Portal        Command Register at the time the START bit was set to trigger it.        This bit is cleared by writing '1' to its position.         This is R/WC. Mask */
#define SAFBC_EC_DONE_STATUS_Msk              (0x000001FFUL)                                 /**< (SAFBC_EC_DONE_STATUS) Register Mask  */

/* -------- SAFBC_EC_EN : (SAFBC Offset: 0x2c) (R/W 32) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt. -------- */

typedef union
{
  struct
  {
    uint32_t DONE_EN:1;                 /**< bit:      0  This bit enables interrupts from the DONE bit in the Status register.         1 = Enabled         0 = Disabled */
    uint32_t :31;                       /**< bit:  1..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_EC_EN_bits_t;
#define SAFBC_EC_EN_RESETVALUE              (0x00U)                                       /**<  (SAFBC_EC_EN) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt.  Reset Value */

#define SAFBC_EC_EN_DONE_EN_Pos               (0)                                            /**< (SAFBC_EC_EN) This bit enables interrupts from the DONE bit in the Status register.         1 = Enabled         0 = Disabled Position */
#define SAFBC_EC_EN_DONE_EN_Msk               (0x1U << SAFBC_EC_EN_DONE_EN_Pos)              /**< (SAFBC_EC_EN) This bit enables interrupts from the DONE bit in the Status register.         1 = Enabled         0 = Disabled Mask */
#define SAFBC_EC_EN_Msk                       (0x00000001UL)                                 /**< (SAFBC_EC_EN) Register Mask  */

/* -------- SAFBC_CONFIG_SIZE : (SAFBC Offset: 0x30) (R/W 32) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. -------- */

typedef union
{
  struct
  {
    uint32_t LIMIT:32;                  /**< bit:  0..31  This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. */
  };
  uint32_t w;
} __SAFBC_CONFIG_SIZE_bits_t;
#define SAFBC_CONFIG_SIZE_RESETVALUE        (0x00U)                                       /**<  (SAFBC_CONFIG_SIZE) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices.  Reset Value */

#define SAFBC_CONFIG_SIZE_LIMIT_Pos           (0)                                            /**< (SAFBC_CONFIG_SIZE) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. Position */
#define SAFBC_CONFIG_SIZE_LIMIT_Msk           (0xFFFFFFFFU << SAFBC_CONFIG_SIZE_LIMIT_Pos)   /**< (SAFBC_CONFIG_SIZE) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. Mask */
#define SAFBC_CONFIG_SIZE_LIMIT(value)        (SAFBC_CONFIG_SIZE_LIMIT_Msk & ((value) << SAFBC_CONFIG_SIZE_LIMIT_Pos))
#define SAFBC_CONFIG_SIZE_Msk                 (0xFFFFFFFFUL)                                 /**< (SAFBC_CONFIG_SIZE) Register Mask  */

/* -------- SAFBC_CONFIG_TH : (SAFBC Offset: 0x34) (R/W 32) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices. -------- */

typedef union
{
  struct
  {
    uint32_t THRESHOLD:32;              /**< bit:  0..31  The address placed in this register is the address of the first byte of the second Flash         device. If there is only one Flash device, then this register must contain a value greater than         the Size Limit register above. */
  };
  uint32_t w;
} __SAFBC_CONFIG_TH_bits_t;
#define SAFBC_CONFIG_TH_RESETVALUE          (0x00U)                                       /**<  (SAFBC_CONFIG_TH) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices.  Reset Value */

#define SAFBC_CONFIG_TH_THRESHOLD_Pos         (0)                                            /**< (SAFBC_CONFIG_TH) The address placed in this register is the address of the first byte of the second Flash         device. If there is only one Flash device, then this register must contain a value greater than         the Size Limit register above. Position */
#define SAFBC_CONFIG_TH_THRESHOLD_Msk         (0xFFFFFFFFU << SAFBC_CONFIG_TH_THRESHOLD_Pos)  /**< (SAFBC_CONFIG_TH) The address placed in this register is the address of the first byte of the second Flash         device. If there is only one Flash device, then this register must contain a value greater than         the Size Limit register above. Mask */
#define SAFBC_CONFIG_TH_THRESHOLD(value)      (SAFBC_CONFIG_TH_THRESHOLD_Msk & ((value) << SAFBC_CONFIG_TH_THRESHOLD_Pos))
#define SAFBC_CONFIG_TH_Msk                   (0xFFFFFFFFUL)                                 /**< (SAFBC_CONFIG_TH) Register Mask  */

/* -------- SAFBC_CONFIG_MISC : (SAFBC Offset: 0x38) (R/W 32) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access. -------- */

typedef union
{
  struct
  {
    uint32_t PREFETCH_OPT_EN:2;         /**< bit:   0..1  Selects optimized data prefetching from the Flash devices to the eSPI Master. This field has no        effect unless the PREFETCH_EN bit is also '1'         00= Prefetched data from Flash is delivered using canonical eSPI methods. (Default)        11= Prefetched data from Flash is delivered using expedited eSPI methods.        01,10= (Reserved) */
    uint32_t :2;                        /**< bit:   2..3  Reserved                                      */
    uint32_t CS0_4BYTE_ADDR_MODE:1;     /**< bit:      4  Declares whether the Flash device on CS0# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS0# Flash device.         1=Issue 4-byte addresses to the CS0# Flash device. */
    uint32_t CS1_4BYTE_ADDR_MODE:1;     /**< bit:      5  Declares whether the Flash device on CS1# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS1# Flash device.         1=Issue 4-byte addresses to the CS1# Flash device. */
    uint32_t CS0_CONT_PREFIX_EN:1;      /**< bit:      6  Declares whether the Flash device on CS0# requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS0#.         1=A Prefix command will be issued from the CS0 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS0# before entry into Continuous Mode. */
    uint32_t CS1_CONT_PREFIX_EN:1;      /**< bit:      7  Declares whether the Flash device on CS1# (if any) requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS1#.         1=A Prefix command will be issued from the CS1 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS1# before entry into Continuous Mode. */
    uint32_t :4;                        /**< bit:  8..11  Reserved                                      */
    uint32_t SAF_MODE_ENABLE:1;         /**< bit:     12  0=SAFS Mode operation is globally disabled.               1=SAFS Mode operation is globally enabled. The Captive QMSPI Block register set and       the SAF Communication register set also become inaccessible to EC firmware. */
    uint32_t SAF_MODE_LOCK:1;           /**< bit:     13  0=The SAF Bridge register sets are unlocked and available R/W to EC firmware.               1=The SAF Bridge register sets Device Configuration and Device Timing, including this                register, are locked read-only to EC firmware. */
    uint32_t :18;                       /**< bit: 14..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_CONFIG_MISC_bits_t;
#define SAFBC_CONFIG_MISC_RESETVALUE        (0x00U)                                       /**<  (SAFBC_CONFIG_MISC) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access.  Reset Value */

#define SAFBC_CONFIG_MISC_PREFETCH_OPT_EN_Pos (0)                                            /**< (SAFBC_CONFIG_MISC) Selects optimized data prefetching from the Flash devices to the eSPI Master. This field has no        effect unless the PREFETCH_EN bit is also '1'         00= Prefetched data from Flash is delivered using canonical eSPI methods. (Default)        11= Prefetched data from Flash is delivered using expedited eSPI methods.        01,10= (Reserved) Position */
#define SAFBC_CONFIG_MISC_PREFETCH_OPT_EN_Msk (0x3U << SAFBC_CONFIG_MISC_PREFETCH_OPT_EN_Pos)  /**< (SAFBC_CONFIG_MISC) Selects optimized data prefetching from the Flash devices to the eSPI Master. This field has no        effect unless the PREFETCH_EN bit is also '1'         00= Prefetched data from Flash is delivered using canonical eSPI methods. (Default)        11= Prefetched data from Flash is delivered using expedited eSPI methods.        01,10= (Reserved) Mask */
#define SAFBC_CONFIG_MISC_PREFETCH_OPT_EN(value) (SAFBC_CONFIG_MISC_PREFETCH_OPT_EN_Msk & ((value) << SAFBC_CONFIG_MISC_PREFETCH_OPT_EN_Pos))
#define SAFBC_CONFIG_MISC_CS0_4BYTE_ADDR_MODE_Pos (4)                                            /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS0# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS0# Flash device.         1=Issue 4-byte addresses to the CS0# Flash device. Position */
#define SAFBC_CONFIG_MISC_CS0_4BYTE_ADDR_MODE_Msk (0x1U << SAFBC_CONFIG_MISC_CS0_4BYTE_ADDR_MODE_Pos)  /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS0# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS0# Flash device.         1=Issue 4-byte addresses to the CS0# Flash device. Mask */
#define SAFBC_CONFIG_MISC_CS1_4BYTE_ADDR_MODE_Pos (5)                                            /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS1# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS1# Flash device.         1=Issue 4-byte addresses to the CS1# Flash device. Position */
#define SAFBC_CONFIG_MISC_CS1_4BYTE_ADDR_MODE_Msk (0x1U << SAFBC_CONFIG_MISC_CS1_4BYTE_ADDR_MODE_Pos)  /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS1# uses a 32-bit address. Set this bit to '1' if the Flash         device is 32Mbytes (256MBits) or greater. This bit does not cause the Flash device itself to be placed         into 4-byte address mode; that must be done by EC firmware before enabling SAFS operation.         0=Issue 3-byte addresses to the CS1# Flash device.         1=Issue 4-byte addresses to the CS1# Flash device. Mask */
#define SAFBC_CONFIG_MISC_CS0_CONT_PREFIX_EN_Pos (6)                                            /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS0# requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS0#.         1=A Prefix command will be issued from the CS0 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS0# before entry into Continuous Mode. Position */
#define SAFBC_CONFIG_MISC_CS0_CONT_PREFIX_EN_Msk (0x1U << SAFBC_CONFIG_MISC_CS0_CONT_PREFIX_EN_Pos)  /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS0# requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS0#.         1=A Prefix command will be issued from the CS0 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS0# before entry into Continuous Mode. Mask */
#define SAFBC_CONFIG_MISC_CS1_CONT_PREFIX_EN_Pos (7)                                            /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS1# (if any) requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS1#.         1=A Prefix command will be issued from the CS1 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS1# before entry into Continuous Mode. Position */
#define SAFBC_CONFIG_MISC_CS1_CONT_PREFIX_EN_Msk (0x1U << SAFBC_CONFIG_MISC_CS1_CONT_PREFIX_EN_Pos)  /**< (SAFBC_CONFIG_MISC) Declares whether the Flash device on CS1# (if any) requires a prefix command to enter Continuous Mode.         0=No prefix command is required by the Flash device on CS1#.         1=A Prefix command will be issued from the CS1 fields of the SAF Flash Configuration Special Mode Register         to the Flash device on CS1# before entry into Continuous Mode. Mask */
#define SAFBC_CONFIG_MISC_SAF_MODE_ENABLE_Pos (12)                                           /**< (SAFBC_CONFIG_MISC) 0=SAFS Mode operation is globally disabled.               1=SAFS Mode operation is globally enabled. The Captive QMSPI Block register set and       the SAF Communication register set also become inaccessible to EC firmware. Position */
#define SAFBC_CONFIG_MISC_SAF_MODE_ENABLE_Msk (0x1U << SAFBC_CONFIG_MISC_SAF_MODE_ENABLE_Pos)  /**< (SAFBC_CONFIG_MISC) 0=SAFS Mode operation is globally disabled.               1=SAFS Mode operation is globally enabled. The Captive QMSPI Block register set and       the SAF Communication register set also become inaccessible to EC firmware. Mask */
#define SAFBC_CONFIG_MISC_SAF_MODE_LOCK_Pos   (13)                                           /**< (SAFBC_CONFIG_MISC) 0=The SAF Bridge register sets are unlocked and available R/W to EC firmware.               1=The SAF Bridge register sets Device Configuration and Device Timing, including this                register, are locked read-only to EC firmware. Position */
#define SAFBC_CONFIG_MISC_SAF_MODE_LOCK_Msk   (0x1U << SAFBC_CONFIG_MISC_SAF_MODE_LOCK_Pos)  /**< (SAFBC_CONFIG_MISC) 0=The SAF Bridge register sets are unlocked and available R/W to EC firmware.               1=The SAF Bridge register sets Device Configuration and Device Timing, including this                register, are locked read-only to EC firmware. Mask */
#define SAFBC_CONFIG_MISC_Msk                 (0x000030F3UL)                                 /**< (SAFBC_CONFIG_MISC) Register Mask  */

/* -------- SAFBC_ESPI_ERRINTR_STAT : (SAFBC Offset: 0x3c) (R/W 32) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register. -------- */

typedef union
{
  struct
  {
    uint32_t TIMEOUT:1;                 /**< bit:      0  This bit indicates that an Erase or Write request from the Host Chipset has failed               because the Flash has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t OUT_OF_RANGE:1;            /**< bit:      1  This bit indicates that a request from the Host Chipset has been rejected because        it is beyond the physical limits of the attached Flash devices. This bit is cleared by        writing '1' to its position.        This is R/WC. */
    uint32_t ACCESS_VIOLATION:1;        /**< bit:      2  This bit indicates that a request from the Host Chipset has been rejected because        it violates the Protection Register settings. This bit is cleared by writing '1' to its        position.        This is R/WC. */
    uint32_t BOUNDARY_4K:1;             /**< bit:      3  This bit indicates that a Read request from the Host Chipset has been rejected        because it has attempted to cross a 4K Flash address boundary. This bit is cleared by        writing '1' to its position.        This is R/WC. */
    uint32_t ERASE_SIZE:1;              /**< bit:      4  This bit indicates that an invalid Erase Block Size has been specified in        an Erase request from the Host Chipset. This bit is cleared by writing '1' to its position.        This is R/WC. */
    uint32_t :27;                       /**< bit:  5..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_ESPI_ERRINTR_STAT_bits_t;
#define SAFBC_ESPI_ERRINTR_STAT_RESETVALUE  (0x00U)                                       /**<  (SAFBC_ESPI_ERRINTR_STAT) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register.  Reset Value */

#define SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Pos   (0)                                            /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an Erase or Write request from the Host Chipset has failed               because the Flash has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Msk   (0x1U << SAFBC_ESPI_ERRINTR_STAT_TIMEOUT_Pos)  /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an Erase or Write request from the Host Chipset has failed               because the Flash has timed out. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Pos (1)                                            /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it is beyond the physical limits of the attached Flash devices. This bit is cleared by        writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Msk (0x1U << SAFBC_ESPI_ERRINTR_STAT_OUT_OF_RANGE_Pos)  /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it is beyond the physical limits of the attached Flash devices. This bit is cleared by        writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLATION_Pos (2)                                            /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it violates the Protection Register settings. This bit is cleared by writing '1' to its        position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLATION_Msk (0x1U << SAFBC_ESPI_ERRINTR_STAT_ACCESS_VIOLATION_Pos)  /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a request from the Host Chipset has been rejected because        it violates the Protection Register settings. This bit is cleared by writing '1' to its        position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_BOUNDARY_4K_Pos (3)                                            /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a Read request from the Host Chipset has been rejected        because it has attempted to cross a 4K Flash address boundary. This bit is cleared by        writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_BOUNDARY_4K_Msk (0x1U << SAFBC_ESPI_ERRINTR_STAT_BOUNDARY_4K_Pos)  /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that a Read request from the Host Chipset has been rejected        because it has attempted to cross a 4K Flash address boundary. This bit is cleared by        writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Pos (4)                                            /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an invalid Erase Block Size has been specified in        an Erase request from the Host Chipset. This bit is cleared by writing '1' to its position.        This is R/WC. Position */
#define SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Msk (0x1U << SAFBC_ESPI_ERRINTR_STAT_ERASE_SIZE_Pos)  /**< (SAFBC_ESPI_ERRINTR_STAT) This bit indicates that an invalid Erase Block Size has been specified in        an Erase request from the Host Chipset. This bit is cleared by writing '1' to its position.        This is R/WC. Mask */
#define SAFBC_ESPI_ERRINTR_STAT_Msk           (0x0000001FUL)                                 /**< (SAFBC_ESPI_ERRINTR_STAT) Register Mask  */

/* -------- SAFBC_ESPI_ERRINT_EN : (SAFBC Offset: 0x40) (R/W 32) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware. -------- */

typedef union
{
  struct
  {
    uint32_t TIMEOUT_EN:1;              /**< bit:      0  This bit enables the TIMEOUT status bit as an interrupt. */
    uint32_t OUT_OF_RANGE_EN:1;         /**< bit:      1  This bit enables the OUT_OF_RANGE status bit as an interrupt. */
    uint32_t ACCESS_VIOLATION_EN:1;     /**< bit:      2  This bit enables the ACCESS_VIOLATION status bit as an interrupt. */
    uint32_t BOUNDARY_4K_EN:1;          /**< bit:      3  This bit enables the 4K_BOUNDARY status bit as an interrupt. */
    uint32_t ERASE_SIZE_EN:1;           /**< bit:      4  This bit enables the ERASE_SIZE status bit as an interrupt. */
    uint32_t :27;                       /**< bit:  5..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_ESPI_ERRINT_EN_bits_t;
#define SAFBC_ESPI_ERRINT_EN_RESETVALUE     (0x00U)                                       /**<  (SAFBC_ESPI_ERRINT_EN) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware.  Reset Value */

#define SAFBC_ESPI_ERRINT_EN_TIMEOUT_EN_Pos   (0)                                            /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the TIMEOUT status bit as an interrupt. Position */
#define SAFBC_ESPI_ERRINT_EN_TIMEOUT_EN_Msk   (0x1U << SAFBC_ESPI_ERRINT_EN_TIMEOUT_EN_Pos)  /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the TIMEOUT status bit as an interrupt. Mask */
#define SAFBC_ESPI_ERRINT_EN_OUT_OF_RANGE_EN_Pos (1)                                            /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the OUT_OF_RANGE status bit as an interrupt. Position */
#define SAFBC_ESPI_ERRINT_EN_OUT_OF_RANGE_EN_Msk (0x1U << SAFBC_ESPI_ERRINT_EN_OUT_OF_RANGE_EN_Pos)  /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the OUT_OF_RANGE status bit as an interrupt. Mask */
#define SAFBC_ESPI_ERRINT_EN_ACCESS_VIOLATION_EN_Pos (2)                                            /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the ACCESS_VIOLATION status bit as an interrupt. Position */
#define SAFBC_ESPI_ERRINT_EN_ACCESS_VIOLATION_EN_Msk (0x1U << SAFBC_ESPI_ERRINT_EN_ACCESS_VIOLATION_EN_Pos)  /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the ACCESS_VIOLATION status bit as an interrupt. Mask */
#define SAFBC_ESPI_ERRINT_EN_BOUNDARY_4K_EN_Pos (3)                                            /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the 4K_BOUNDARY status bit as an interrupt. Position */
#define SAFBC_ESPI_ERRINT_EN_BOUNDARY_4K_EN_Msk (0x1U << SAFBC_ESPI_ERRINT_EN_BOUNDARY_4K_EN_Pos)  /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the 4K_BOUNDARY status bit as an interrupt. Mask */
#define SAFBC_ESPI_ERRINT_EN_ERASE_SIZE_EN_Pos (4)                                            /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the ERASE_SIZE status bit as an interrupt. Position */
#define SAFBC_ESPI_ERRINT_EN_ERASE_SIZE_EN_Msk (0x1U << SAFBC_ESPI_ERRINT_EN_ERASE_SIZE_EN_Pos)  /**< (SAFBC_ESPI_ERRINT_EN) This bit enables the ERASE_SIZE status bit as an interrupt. Mask */
#define SAFBC_ESPI_ERRINT_EN_Msk              (0x0000001FUL)                                 /**< (SAFBC_ESPI_ERRINT_EN) Register Mask  */

/* -------- SAFBC_EC_BUSY_REG : (SAFBC Offset: 0x44) (R/W 32) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access. -------- */

typedef union
{
  struct
  {
    uint32_t EC_BUSY:1;                 /**< bit:      0  This Read-Only bit is set to '1' by hardware when the START bit is written with        '1' to start a new request. It is cleared to '0' when request completes, and its        falling edge sets the DONE bit. While this bit is '1', the EC Portal Command, Flash        Address and Buffer Address registers are locked Read-Only, and the START bit is disabled,        causing it only to set the START_OVERFLOW error status bit to '1'. */
    uint32_t :31;                       /**< bit:  1..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_EC_BUSY_REG_bits_t;
#define SAFBC_EC_BUSY_REG_RESETVALUE        (0x00U)                                       /**<  (SAFBC_EC_BUSY_REG) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access.  Reset Value */

#define SAFBC_EC_BUSY_REG_EC_BUSY_Pos         (0)                                            /**< (SAFBC_EC_BUSY_REG) This Read-Only bit is set to '1' by hardware when the START bit is written with        '1' to start a new request. It is cleared to '0' when request completes, and its        falling edge sets the DONE bit. While this bit is '1', the EC Portal Command, Flash        Address and Buffer Address registers are locked Read-Only, and the START bit is disabled,        causing it only to set the START_OVERFLOW error status bit to '1'. Position */
#define SAFBC_EC_BUSY_REG_EC_BUSY_Msk         (0x1U << SAFBC_EC_BUSY_REG_EC_BUSY_Pos)        /**< (SAFBC_EC_BUSY_REG) This Read-Only bit is set to '1' by hardware when the START bit is written with        '1' to start a new request. It is cleared to '0' when request completes, and its        falling edge sets the DONE bit. While this bit is '1', the EC Portal Command, Flash        Address and Buffer Address registers are locked Read-Only, and the START bit is disabled,        causing it only to set the START_OVERFLOW error status bit to '1'. Mask */
#define SAFBC_EC_BUSY_REG_Msk                 (0x00000001UL)                                 /**< (SAFBC_EC_BUSY_REG) Register Mask  */

/* -------- SAFBC_CNFG_CS0_OPCODEA : (SAFBC Offset: 0x4c) (R/W 32) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0. -------- */

typedef union
{
  struct
  {
    uint32_t OP_WE:8;                   /**< bit:   0..7  This field contains the 8-bit Opcode for Write Enable in the respective Flash device. */
    uint32_t OP_SUS:8;                  /**< bit:  8..15  This field contains the 8-bit Opcode for Suspend in the respective Flash device. */
    uint32_t OP_RSM:8;                  /**< bit: 16..23  This field contains the 8-bit Opcode for Resume in the respective Flash device. */
    uint32_t OP_POLL1:8;                /**< bit: 24..31  This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. */
  };
  uint32_t w;
} __SAFBC_CNFG_CS0_OPCODEA_bits_t;
#define SAFBC_CNFG_CS0_OPCODEA_RESETVALUE   (0x00U)                                       /**<  (SAFBC_CNFG_CS0_OPCODEA) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0.  Reset Value */

#define SAFBC_CNFG_CS0_OPCODEA_OP_WE_Pos      (0)                                            /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Position */
#define SAFBC_CNFG_CS0_OPCODEA_OP_WE_Msk      (0xFFU << SAFBC_CNFG_CS0_OPCODEA_OP_WE_Pos)    /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Mask */
#define SAFBC_CNFG_CS0_OPCODEA_OP_WE(value)   (SAFBC_CNFG_CS0_OPCODEA_OP_WE_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEA_OP_WE_Pos))
#define SAFBC_CNFG_CS0_OPCODEA_OP_SUS_Pos     (8)                                            /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Position */
#define SAFBC_CNFG_CS0_OPCODEA_OP_SUS_Msk     (0xFFU << SAFBC_CNFG_CS0_OPCODEA_OP_SUS_Pos)   /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Mask */
#define SAFBC_CNFG_CS0_OPCODEA_OP_SUS(value)  (SAFBC_CNFG_CS0_OPCODEA_OP_SUS_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEA_OP_SUS_Pos))
#define SAFBC_CNFG_CS0_OPCODEA_OP_RSM_Pos     (16)                                           /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Position */
#define SAFBC_CNFG_CS0_OPCODEA_OP_RSM_Msk     (0xFFU << SAFBC_CNFG_CS0_OPCODEA_OP_RSM_Pos)   /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Mask */
#define SAFBC_CNFG_CS0_OPCODEA_OP_RSM(value)  (SAFBC_CNFG_CS0_OPCODEA_OP_RSM_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEA_OP_RSM_Pos))
#define SAFBC_CNFG_CS0_OPCODEA_OP_POLL1_Pos   (24)                                           /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Position */
#define SAFBC_CNFG_CS0_OPCODEA_OP_POLL1_Msk   (0xFFU << SAFBC_CNFG_CS0_OPCODEA_OP_POLL1_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Mask */
#define SAFBC_CNFG_CS0_OPCODEA_OP_POLL1(value) (SAFBC_CNFG_CS0_OPCODEA_OP_POLL1_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEA_OP_POLL1_Pos))
#define SAFBC_CNFG_CS0_OPCODEA_Msk            (0xFFFFFFFFUL)                                 /**< (SAFBC_CNFG_CS0_OPCODEA) Register Mask  */

/* -------- SAFBC_CNFG_CS0_OPCODEB : (SAFBC Offset: 0x50) (R/W 32) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it. -------- */

typedef union
{
  struct
  {
    uint32_t OP_ERASE0:8;               /**< bit:   0..7  This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. */
    uint32_t OP_ERASE1:8;               /**< bit:  8..15  This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. */
    uint32_t OP_ERASE2:8;               /**< bit: 16..23  This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. */
    uint32_t OP_PROGRAM:8;              /**< bit: 24..31  This field contains the 8-bit Opcode for Page Program in the respective Flash device. */
  };
  uint32_t w;
} __SAFBC_CNFG_CS0_OPCODEB_bits_t;
#define SAFBC_CNFG_CS0_OPCODEB_RESETVALUE   (0x00U)                                       /**<  (SAFBC_CNFG_CS0_OPCODEB) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it.  Reset Value */

#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE0_Pos  (0)                                            /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Position */
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE0_Msk  (0xFFU << SAFBC_CNFG_CS0_OPCODEB_OP_ERASE0_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Mask */
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE0(value) (SAFBC_CNFG_CS0_OPCODEB_OP_ERASE0_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEB_OP_ERASE0_Pos))
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE1_Pos  (8)                                            /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE1_Msk  (0xFFU << SAFBC_CNFG_CS0_OPCODEB_OP_ERASE1_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE1(value) (SAFBC_CNFG_CS0_OPCODEB_OP_ERASE1_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEB_OP_ERASE1_Pos))
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE2_Pos  (16)                                           /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE2_Msk  (0xFFU << SAFBC_CNFG_CS0_OPCODEB_OP_ERASE2_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CNFG_CS0_OPCODEB_OP_ERASE2(value) (SAFBC_CNFG_CS0_OPCODEB_OP_ERASE2_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEB_OP_ERASE2_Pos))
#define SAFBC_CNFG_CS0_OPCODEB_OP_PROGRAM_Pos (24)                                           /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Position */
#define SAFBC_CNFG_CS0_OPCODEB_OP_PROGRAM_Msk (0xFFU << SAFBC_CNFG_CS0_OPCODEB_OP_PROGRAM_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Mask */
#define SAFBC_CNFG_CS0_OPCODEB_OP_PROGRAM(value) (SAFBC_CNFG_CS0_OPCODEB_OP_PROGRAM_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEB_OP_PROGRAM_Pos))
#define SAFBC_CNFG_CS0_OPCODEB_Msk            (0xFFFFFFFFUL)                                 /**< (SAFBC_CNFG_CS0_OPCODEB) Register Mask  */

/* -------- SAFBC_CNFG_CS0_OPCODEC : (SAFBC Offset: 0x54) (R/W 32) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device. -------- */

typedef union
{
  struct
  {
    uint32_t OP_READ:8;                 /**< bit:   0..7  This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. */
    uint32_t MODE_NONC:8;               /**< bit:  8..15  This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. */
    uint32_t MODE_CONT:8;               /**< bit: 16..23  This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. */
    uint32_t OP_POLL2:8;                /**< bit: 24..31  This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register */
  };
  uint32_t w;
} __SAFBC_CNFG_CS0_OPCODEC_bits_t;
#define SAFBC_CNFG_CS0_OPCODEC_RESETVALUE   (0x00U)                                       /**<  (SAFBC_CNFG_CS0_OPCODEC) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device.  Reset Value */

#define SAFBC_CNFG_CS0_OPCODEC_OP_READ_Pos    (0)                                            /**< (SAFBC_CNFG_CS0_OPCODEC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Position */
#define SAFBC_CNFG_CS0_OPCODEC_OP_READ_Msk    (0xFFU << SAFBC_CNFG_CS0_OPCODEC_OP_READ_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Mask */
#define SAFBC_CNFG_CS0_OPCODEC_OP_READ(value) (SAFBC_CNFG_CS0_OPCODEC_OP_READ_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEC_OP_READ_Pos))
#define SAFBC_CNFG_CS0_OPCODEC_MODE_NONC_Pos  (8)                                            /**< (SAFBC_CNFG_CS0_OPCODEC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Position */
#define SAFBC_CNFG_CS0_OPCODEC_MODE_NONC_Msk  (0xFFU << SAFBC_CNFG_CS0_OPCODEC_MODE_NONC_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Mask */
#define SAFBC_CNFG_CS0_OPCODEC_MODE_NONC(value) (SAFBC_CNFG_CS0_OPCODEC_MODE_NONC_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEC_MODE_NONC_Pos))
#define SAFBC_CNFG_CS0_OPCODEC_MODE_CONT_Pos  (16)                                           /**< (SAFBC_CNFG_CS0_OPCODEC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Position */
#define SAFBC_CNFG_CS0_OPCODEC_MODE_CONT_Msk  (0xFFU << SAFBC_CNFG_CS0_OPCODEC_MODE_CONT_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Mask */
#define SAFBC_CNFG_CS0_OPCODEC_MODE_CONT(value) (SAFBC_CNFG_CS0_OPCODEC_MODE_CONT_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEC_MODE_CONT_Pos))
#define SAFBC_CNFG_CS0_OPCODEC_OP_POLL2_Pos   (24)                                           /**< (SAFBC_CNFG_CS0_OPCODEC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Position */
#define SAFBC_CNFG_CS0_OPCODEC_OP_POLL2_Msk   (0xFFU << SAFBC_CNFG_CS0_OPCODEC_OP_POLL2_Pos)  /**< (SAFBC_CNFG_CS0_OPCODEC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Mask */
#define SAFBC_CNFG_CS0_OPCODEC_OP_POLL2(value) (SAFBC_CNFG_CS0_OPCODEC_OP_POLL2_Msk & ((value) << SAFBC_CNFG_CS0_OPCODEC_OP_POLL2_Pos))
#define SAFBC_CNFG_CS0_OPCODEC_Msk            (0xFFFFFFFFUL)                                 /**< (SAFBC_CNFG_CS0_OPCODEC) Register Mask  */

/* -------- SAFBC_CNFG_CS0_DESC : (SAFBC Offset: 0x58) (R/W 32) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 -------- */

typedef union
{
  struct
  {
    uint32_t ENTER_CONT:4;              /**< bit:   0..3  This field points to the first Descriptor element of the Enter Continuous Mode chain. */
    uint32_t :4;                        /**< bit:   4..7  Reserved                                      */
    uint32_t READ_CONT:4;               /**< bit:  8..11  This field points to the first Descriptor element of the Continuous Read chain. */
    uint32_t SIZE_CONT:4;               /**< bit: 12..15  This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_CNFG_CS0_DESC_bits_t;
#define SAFBC_CNFG_CS0_DESC_RESETVALUE      (0x00U)                                       /**<  (SAFBC_CNFG_CS0_DESC) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1  Reset Value */

#define SAFBC_CNFG_CS0_DESC_ENTER_CONT_Pos    (0)                                            /**< (SAFBC_CNFG_CS0_DESC) This field points to the first Descriptor element of the Enter Continuous Mode chain. Position */
#define SAFBC_CNFG_CS0_DESC_ENTER_CONT_Msk    (0xFU << SAFBC_CNFG_CS0_DESC_ENTER_CONT_Pos)   /**< (SAFBC_CNFG_CS0_DESC) This field points to the first Descriptor element of the Enter Continuous Mode chain. Mask */
#define SAFBC_CNFG_CS0_DESC_ENTER_CONT(value) (SAFBC_CNFG_CS0_DESC_ENTER_CONT_Msk & ((value) << SAFBC_CNFG_CS0_DESC_ENTER_CONT_Pos))
#define SAFBC_CNFG_CS0_DESC_READ_CONT_Pos     (8)                                            /**< (SAFBC_CNFG_CS0_DESC) This field points to the first Descriptor element of the Continuous Read chain. Position */
#define SAFBC_CNFG_CS0_DESC_READ_CONT_Msk     (0xFU << SAFBC_CNFG_CS0_DESC_READ_CONT_Pos)    /**< (SAFBC_CNFG_CS0_DESC) This field points to the first Descriptor element of the Continuous Read chain. Mask */
#define SAFBC_CNFG_CS0_DESC_READ_CONT(value)  (SAFBC_CNFG_CS0_DESC_READ_CONT_Msk & ((value) << SAFBC_CNFG_CS0_DESC_READ_CONT_Pos))
#define SAFBC_CNFG_CS0_DESC_SIZE_CONT_Pos     (12)                                           /**< (SAFBC_CNFG_CS0_DESC) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Position */
#define SAFBC_CNFG_CS0_DESC_SIZE_CONT_Msk     (0xFU << SAFBC_CNFG_CS0_DESC_SIZE_CONT_Pos)    /**< (SAFBC_CNFG_CS0_DESC) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Mask */
#define SAFBC_CNFG_CS0_DESC_SIZE_CONT(value)  (SAFBC_CNFG_CS0_DESC_SIZE_CONT_Msk & ((value) << SAFBC_CNFG_CS0_DESC_SIZE_CONT_Pos))
#define SAFBC_CNFG_CS0_DESC_Msk               (0x0000FF0FUL)                                 /**< (SAFBC_CNFG_CS0_DESC) Register Mask  */

/* -------- SAFBC_CNFG_CS1_OPCODEA : (SAFBC Offset: 0x5c) (R/W 32) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0. -------- */

typedef union
{
  struct
  {
    uint32_t OP_WE:8;                   /**< bit:   0..7  This field contains the 8-bit Opcode for Write Enable in the respective Flash device. */
    uint32_t OP_SUS:8;                  /**< bit:  8..15  This field contains the 8-bit Opcode for Suspend in the respective Flash device. */
    uint32_t OP_RSM:8;                  /**< bit: 16..23  This field contains the 8-bit Opcode for Resume in the respective Flash device. */
    uint32_t OP_POLL1:8;                /**< bit: 24..31  This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. */
  };
  uint32_t w;
} __SAFBC_CNFG_CS1_OPCODEA_bits_t;
#define SAFBC_CNFG_CS1_OPCODEA_RESETVALUE   (0x00U)                                       /**<  (SAFBC_CNFG_CS1_OPCODEA) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0.  Reset Value */

#define SAFBC_CNFG_CS1_OPCODEA_OP_WE_Pos      (0)                                            /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Position */
#define SAFBC_CNFG_CS1_OPCODEA_OP_WE_Msk      (0xFFU << SAFBC_CNFG_CS1_OPCODEA_OP_WE_Pos)    /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Write Enable in the respective Flash device. Mask */
#define SAFBC_CNFG_CS1_OPCODEA_OP_WE(value)   (SAFBC_CNFG_CS1_OPCODEA_OP_WE_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEA_OP_WE_Pos))
#define SAFBC_CNFG_CS1_OPCODEA_OP_SUS_Pos     (8)                                            /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Position */
#define SAFBC_CNFG_CS1_OPCODEA_OP_SUS_Msk     (0xFFU << SAFBC_CNFG_CS1_OPCODEA_OP_SUS_Pos)   /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Suspend in the respective Flash device. Mask */
#define SAFBC_CNFG_CS1_OPCODEA_OP_SUS(value)  (SAFBC_CNFG_CS1_OPCODEA_OP_SUS_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEA_OP_SUS_Pos))
#define SAFBC_CNFG_CS1_OPCODEA_OP_RSM_Pos     (16)                                           /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Position */
#define SAFBC_CNFG_CS1_OPCODEA_OP_RSM_Msk     (0xFFU << SAFBC_CNFG_CS1_OPCODEA_OP_RSM_Pos)   /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Resume in the respective Flash device. Mask */
#define SAFBC_CNFG_CS1_OPCODEA_OP_RSM(value)  (SAFBC_CNFG_CS1_OPCODEA_OP_RSM_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEA_OP_RSM_Pos))
#define SAFBC_CNFG_CS1_OPCODEA_OP_POLL1_Pos   (24)                                           /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Position */
#define SAFBC_CNFG_CS1_OPCODEA_OP_POLL1_Msk   (0xFFU << SAFBC_CNFG_CS1_OPCODEA_OP_POLL1_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEA) This field contains the 8-bit Opcode for Read Status Register in the respective Flash       device. Mask */
#define SAFBC_CNFG_CS1_OPCODEA_OP_POLL1(value) (SAFBC_CNFG_CS1_OPCODEA_OP_POLL1_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEA_OP_POLL1_Pos))
#define SAFBC_CNFG_CS1_OPCODEA_Msk            (0xFFFFFFFFUL)                                 /**< (SAFBC_CNFG_CS1_OPCODEA) Register Mask  */

/* -------- SAFBC_CNFG_CS1_OPCODEB : (SAFBC Offset: 0x60) (R/W 32) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it. -------- */

typedef union
{
  struct
  {
    uint32_t OP_ERASE0:8;               /**< bit:   0..7  This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. */
    uint32_t OP_ERASE1:8;               /**< bit:  8..15  This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. */
    uint32_t OP_ERASE2:8;               /**< bit: 16..23  This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. */
    uint32_t OP_PROGRAM:8;              /**< bit: 24..31  This field contains the 8-bit Opcode for Page Program in the respective Flash device. */
  };
  uint32_t w;
} __SAFBC_CNFG_CS1_OPCODEB_bits_t;
#define SAFBC_CNFG_CS1_OPCODEB_RESETVALUE   (0x00U)                                       /**<  (SAFBC_CNFG_CS1_OPCODEB) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it.  Reset Value */

#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE0_Pos  (0)                                            /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Position */
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE0_Msk  (0xFFU << SAFBC_CNFG_CS1_OPCODEB_OP_ERASE0_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for 4K Erase in the respective Flash device. This Erase         size is mandatory. Mask */
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE0(value) (SAFBC_CNFG_CS1_OPCODEB_OP_ERASE0_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEB_OP_ERASE0_Pos))
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE1_Pos  (8)                                            /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE1_Msk  (0xFFU << SAFBC_CNFG_CS1_OPCODEB_OP_ERASE1_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for 32K Erase in the respective Flash device. If there         are two Flash devices present, and 32K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE1(value) (SAFBC_CNFG_CS1_OPCODEB_OP_ERASE1_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEB_OP_ERASE1_Pos))
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE2_Pos  (16)                                           /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Position */
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE2_Msk  (0xFFU << SAFBC_CNFG_CS1_OPCODEB_OP_ERASE2_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for 64K Erase in the respective Flash device. If there         are two Flash devices present, and 64K Erase is not supported by both Flash devices, then this         field must be left as 00h in both the CS0 and CS1 registers. Mask */
#define SAFBC_CNFG_CS1_OPCODEB_OP_ERASE2(value) (SAFBC_CNFG_CS1_OPCODEB_OP_ERASE2_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEB_OP_ERASE2_Pos))
#define SAFBC_CNFG_CS1_OPCODEB_OP_PROGRAM_Pos (24)                                           /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Position */
#define SAFBC_CNFG_CS1_OPCODEB_OP_PROGRAM_Msk (0xFFU << SAFBC_CNFG_CS1_OPCODEB_OP_PROGRAM_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEB) This field contains the 8-bit Opcode for Page Program in the respective Flash device. Mask */
#define SAFBC_CNFG_CS1_OPCODEB_OP_PROGRAM(value) (SAFBC_CNFG_CS1_OPCODEB_OP_PROGRAM_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEB_OP_PROGRAM_Pos))
#define SAFBC_CNFG_CS1_OPCODEB_Msk            (0xFFFFFFFFUL)                                 /**< (SAFBC_CNFG_CS1_OPCODEB) Register Mask  */

/* -------- SAFBC_CNFG_CS1_OPCODEC : (SAFBC Offset: 0x64) (R/W 32) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device. -------- */

typedef union
{
  struct
  {
    uint32_t OP_READ:8;                 /**< bit:   0..7  This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. */
    uint32_t MODE_NONC:8;               /**< bit:  8..15  This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. */
    uint32_t MODE_CONT:8;               /**< bit: 16..23  This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. */
    uint32_t OP_POLL2:8;                /**< bit: 24..31  This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register */
  };
  uint32_t w;
} __SAFBC_CNFG_CS1_OPCODEC_bits_t;
#define SAFBC_CNFG_CS1_OPCODEC_RESETVALUE   (0x00U)                                       /**<  (SAFBC_CNFG_CS1_OPCODEC) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device.  Reset Value */

#define SAFBC_CNFG_CS1_OPCODEC_OP_READ_Pos    (0)                                            /**< (SAFBC_CNFG_CS1_OPCODEC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Position */
#define SAFBC_CNFG_CS1_OPCODEC_OP_READ_Msk    (0xFFU << SAFBC_CNFG_CS1_OPCODEC_OP_READ_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEC) This field must contain the 8-bit Opcode for Fast Read Quad or Fast Read Dual in the         respective Flash device. This code is used in entering Continuous Read mode, and does not         appear afterward. Mask */
#define SAFBC_CNFG_CS1_OPCODEC_OP_READ(value) (SAFBC_CNFG_CS1_OPCODEC_OP_READ_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEC_OP_READ_Pos))
#define SAFBC_CNFG_CS1_OPCODEC_MODE_NONC_Pos  (8)                                            /**< (SAFBC_CNFG_CS1_OPCODEC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Position */
#define SAFBC_CNFG_CS1_OPCODEC_MODE_NONC_Msk  (0xFFU << SAFBC_CNFG_CS1_OPCODEC_MODE_NONC_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEC) This field is currently a placeholder and is not used. The recommended value for this         field, for future compatibility, is FFh. Mask */
#define SAFBC_CNFG_CS1_OPCODEC_MODE_NONC(value) (SAFBC_CNFG_CS1_OPCODEC_MODE_NONC_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEC_MODE_NONC_Pos))
#define SAFBC_CNFG_CS1_OPCODEC_MODE_CONT_Pos  (16)                                           /**< (SAFBC_CNFG_CS1_OPCODEC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Position */
#define SAFBC_CNFG_CS1_OPCODEC_MODE_CONT_Msk  (0xFFU << SAFBC_CNFG_CS1_OPCODEC_MODE_CONT_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEC) This field contains the 8-bit Mode code used to place (or keep) the Flash device in         Continuous Read mode. It is strongly recommended that this value be set to A5h, as a         universally-acceptable value among Flash devices. Mask */
#define SAFBC_CNFG_CS1_OPCODEC_MODE_CONT(value) (SAFBC_CNFG_CS1_OPCODEC_MODE_CONT_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEC_MODE_CONT_Pos))
#define SAFBC_CNFG_CS1_OPCODEC_OP_POLL2_Pos   (24)                                           /**< (SAFBC_CNFG_CS1_OPCODEC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Position */
#define SAFBC_CNFG_CS1_OPCODEC_OP_POLL2_Msk   (0xFFU << SAFBC_CNFG_CS1_OPCODEC_OP_POLL2_Pos)  /**< (SAFBC_CNFG_CS1_OPCODEC) This field contains the 8-bit Opcode used to confirm Suspended status in the Flash device.         It is issued using a designated Timing Descriptor chain Poll which is used to read a 16-bit         value. This value is evaluated using the Mask values in the Poll2 Mask register Mask */
#define SAFBC_CNFG_CS1_OPCODEC_OP_POLL2(value) (SAFBC_CNFG_CS1_OPCODEC_OP_POLL2_Msk & ((value) << SAFBC_CNFG_CS1_OPCODEC_OP_POLL2_Pos))
#define SAFBC_CNFG_CS1_OPCODEC_Msk            (0xFFFFFFFFUL)                                 /**< (SAFBC_CNFG_CS1_OPCODEC) Register Mask  */

/* -------- SAFBC_CNFG_CS1_DESC : (SAFBC Offset: 0x68) (R/W 32) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 -------- */

typedef union
{
  struct
  {
    uint32_t ENTER_CONT:4;              /**< bit:   0..3  This field points to the first Descriptor element of the Enter Continuous Mode chain. */
    uint32_t :4;                        /**< bit:   4..7  Reserved                                      */
    uint32_t READ_CONT:4;               /**< bit:  8..11  This field points to the first Descriptor element of the Continuous Read chain. */
    uint32_t SIZE_CONT:4;               /**< bit: 12..15  This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_CNFG_CS1_DESC_bits_t;
#define SAFBC_CNFG_CS1_DESC_RESETVALUE      (0x00U)                                       /**<  (SAFBC_CNFG_CS1_DESC) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1  Reset Value */

#define SAFBC_CNFG_CS1_DESC_ENTER_CONT_Pos    (0)                                            /**< (SAFBC_CNFG_CS1_DESC) This field points to the first Descriptor element of the Enter Continuous Mode chain. Position */
#define SAFBC_CNFG_CS1_DESC_ENTER_CONT_Msk    (0xFU << SAFBC_CNFG_CS1_DESC_ENTER_CONT_Pos)   /**< (SAFBC_CNFG_CS1_DESC) This field points to the first Descriptor element of the Enter Continuous Mode chain. Mask */
#define SAFBC_CNFG_CS1_DESC_ENTER_CONT(value) (SAFBC_CNFG_CS1_DESC_ENTER_CONT_Msk & ((value) << SAFBC_CNFG_CS1_DESC_ENTER_CONT_Pos))
#define SAFBC_CNFG_CS1_DESC_READ_CONT_Pos     (8)                                            /**< (SAFBC_CNFG_CS1_DESC) This field points to the first Descriptor element of the Continuous Read chain. Position */
#define SAFBC_CNFG_CS1_DESC_READ_CONT_Msk     (0xFU << SAFBC_CNFG_CS1_DESC_READ_CONT_Pos)    /**< (SAFBC_CNFG_CS1_DESC) This field points to the first Descriptor element of the Continuous Read chain. Mask */
#define SAFBC_CNFG_CS1_DESC_READ_CONT(value)  (SAFBC_CNFG_CS1_DESC_READ_CONT_Msk & ((value) << SAFBC_CNFG_CS1_DESC_READ_CONT_Pos))
#define SAFBC_CNFG_CS1_DESC_SIZE_CONT_Pos     (12)                                           /**< (SAFBC_CNFG_CS1_DESC) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Position */
#define SAFBC_CNFG_CS1_DESC_SIZE_CONT_Msk     (0xFU << SAFBC_CNFG_CS1_DESC_SIZE_CONT_Pos)    /**< (SAFBC_CNFG_CS1_DESC) This field points to the Descriptor element within the READ_CONT chain that contains         the Length field for data. Mask */
#define SAFBC_CNFG_CS1_DESC_SIZE_CONT(value)  (SAFBC_CNFG_CS1_DESC_SIZE_CONT_Msk & ((value) << SAFBC_CNFG_CS1_DESC_SIZE_CONT_Pos))
#define SAFBC_CNFG_CS1_DESC_Msk               (0x0000FF0FUL)                                 /**< (SAFBC_CNFG_CS1_DESC) Register Mask  */

/* -------- SAFBC_CNFG_CS_DESC : (SAFBC Offset: 0x6c) (R/W 32) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge. -------- */

typedef union
{
  struct
  {
    uint32_t EXIT_CONT:4;               /**< bit:   0..3  This field points to the first Descriptor element of the Exit Continuous Mode chain. */
    uint32_t :4;                        /**< bit:   4..7  Reserved                                      */
    uint32_t POLL1:4;                   /**< bit:  8..11  This field points to the first Descriptor element of the Poll chain, used when         polling for Busy status. */
    uint32_t POLL2:4;                   /**< bit: 12..15  This field points to the first Descriptor element of the Poll chain, used when         polling for Suspended status. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_CNFG_CS_DESC_bits_t;
#define SAFBC_CNFG_CS_DESC_RESETVALUE       (0x00U)                                       /**<  (SAFBC_CNFG_CS_DESC) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge.  Reset Value */

#define SAFBC_CNFG_CS_DESC_EXIT_CONT_Pos      (0)                                            /**< (SAFBC_CNFG_CS_DESC) This field points to the first Descriptor element of the Exit Continuous Mode chain. Position */
#define SAFBC_CNFG_CS_DESC_EXIT_CONT_Msk      (0xFU << SAFBC_CNFG_CS_DESC_EXIT_CONT_Pos)     /**< (SAFBC_CNFG_CS_DESC) This field points to the first Descriptor element of the Exit Continuous Mode chain. Mask */
#define SAFBC_CNFG_CS_DESC_EXIT_CONT(value)   (SAFBC_CNFG_CS_DESC_EXIT_CONT_Msk & ((value) << SAFBC_CNFG_CS_DESC_EXIT_CONT_Pos))
#define SAFBC_CNFG_CS_DESC_POLL1_Pos          (8)                                            /**< (SAFBC_CNFG_CS_DESC) This field points to the first Descriptor element of the Poll chain, used when         polling for Busy status. Position */
#define SAFBC_CNFG_CS_DESC_POLL1_Msk          (0xFU << SAFBC_CNFG_CS_DESC_POLL1_Pos)         /**< (SAFBC_CNFG_CS_DESC) This field points to the first Descriptor element of the Poll chain, used when         polling for Busy status. Mask */
#define SAFBC_CNFG_CS_DESC_POLL1(value)       (SAFBC_CNFG_CS_DESC_POLL1_Msk & ((value) << SAFBC_CNFG_CS_DESC_POLL1_Pos))
#define SAFBC_CNFG_CS_DESC_POLL2_Pos          (12)                                           /**< (SAFBC_CNFG_CS_DESC) This field points to the first Descriptor element of the Poll chain, used when         polling for Suspended status. Position */
#define SAFBC_CNFG_CS_DESC_POLL2_Msk          (0xFU << SAFBC_CNFG_CS_DESC_POLL2_Pos)         /**< (SAFBC_CNFG_CS_DESC) This field points to the first Descriptor element of the Poll chain, used when         polling for Suspended status. Mask */
#define SAFBC_CNFG_CS_DESC_POLL2(value)       (SAFBC_CNFG_CS_DESC_POLL2_Msk & ((value) << SAFBC_CNFG_CS_DESC_POLL2_Pos))
#define SAFBC_CNFG_CS_DESC_Msk                (0x0000FF0FUL)                                 /**< (SAFBC_CNFG_CS_DESC) Register Mask  */

/* -------- SAFBC_PROTECT_LOCK : (SAFBC Offset: 0x70) (R/W 32) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LOCK_0:1;         /**< bit:      0  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 0: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_1:1;         /**< bit:      1  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 1: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_2:1;         /**< bit:      2  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 2: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_3:1;         /**< bit:      3  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 3: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_4:1;         /**< bit:      4  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 4: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_5:1;         /**< bit:      5  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 5: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_6:1;         /**< bit:      6  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 6: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_7:1;         /**< bit:      7  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 7: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_8:1;         /**< bit:      8  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 8: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_9:1;         /**< bit:      9  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 9: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_10:1;        /**< bit:     10  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 10: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_11:1;        /**< bit:     11  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 11: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_12:1;        /**< bit:     12  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 12: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_13:1;        /**< bit:     13  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 13: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_14:1;        /**< bit:     14  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 14: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_15:1;        /**< bit:     15  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 15: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t SAF_PROT_LOCK_16:1;        /**< bit:     16  In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 16: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t :15;                       /**< bit: 17..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_LOCK_:17;         /**< bit:  0..16  In its initial x state, this bit allows Read and Write access to the corresponding         Region Register set RR = x6: Start, Limit, Write and Read.          When written to x, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
    uint32_t :15;                       /**< bit: 17..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_PROTECT_LOCK_bits_t;
#define SAFBC_PROTECT_LOCK_RESETVALUE       (0x00U)                                       /**<  (SAFBC_PROTECT_LOCK) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'.  Reset Value */

#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_0_Pos (0)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 0: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_0_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_0_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 0: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_1_Pos (1)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 1: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_1_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_1_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 1: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_2_Pos (2)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 2: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_2_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_2_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 2: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_3_Pos (3)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 3: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_3_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_3_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 3: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_4_Pos (4)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 4: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_4_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_4_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 4: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_5_Pos (5)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 5: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_5_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_5_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 5: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_6_Pos (6)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 6: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_6_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_6_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 6: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_7_Pos (7)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 7: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_7_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_7_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 7: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_8_Pos (8)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 8: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_8_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_8_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 8: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_9_Pos (9)                                            /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 9: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_9_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_9_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 9: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_10_Pos (10)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 10: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_10_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_10_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 10: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_11_Pos (11)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 11: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_11_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_11_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 11: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_12_Pos (12)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 12: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_12_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_12_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 12: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_13_Pos (13)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 13: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_13_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_13_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 13: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_14_Pos (14)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 14: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_14_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_14_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 14: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_15_Pos (15)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 15: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_15_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_15_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 15: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_16_Pos (16)                                           /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 16: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Position */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_16_Msk (0x1U << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_16_Pos)  /**< (SAFBC_PROTECT_LOCK) In its initial 0 state, this bit allows Read and Write access to the corresponding         Region Register set RR = 16: Start, Limit, Write and Read.          When written to 1, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. Mask */
#define SAFBC_PROTECT_LOCK_Msk                (0x0001FFFFUL)                                 /**< (SAFBC_PROTECT_LOCK) Register Mask  */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK__Pos (0)                                            /**< (SAFBC_PROTECT_LOCK Position) In its initial x state, this bit allows Read and Write access to the corresponding         Region Register set RR = x6: Start, Limit, Write and Read.          When written to x, this bit locks those four registers as read-only, and also locks this         bit itself against being cleared. */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK__Msk (0x1FFFFU << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK__Pos)  /**< (SAFBC_PROTECT_LOCK Mask) SAF_PROT_LOCK_ */
#define SAFBC_PROTECT_LOCK_SAF_PROT_LOCK_(value) (SAFBC_PROTECT_LOCK_SAF_PROT_LOCK__Msk & ((value) << SAFBC_PROTECT_LOCK_SAF_PROT_LOCK__Pos))

/* -------- SAFBC_PROTECT_DIRTY : (SAFBC Offset: 0x74) (R/W 32) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_DIRTY_0:1;        /**< bit:      0  Indicates whether contents of Region 0 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_1:1;        /**< bit:      1  Indicates whether contents of Region 1 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_2:1;        /**< bit:      2  Indicates whether contents of Region 2 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_3:1;        /**< bit:      3  Indicates whether contents of Region 3 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_4:1;        /**< bit:      4  Indicates whether contents of Region 4 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_5:1;        /**< bit:      5  Indicates whether contents of Region 5 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_6:1;        /**< bit:      6  Indicates whether contents of Region 6 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_7:1;        /**< bit:      7  Indicates whether contents of Region 7 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_8:1;        /**< bit:      8  Indicates whether contents of Region 8 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_9:1;        /**< bit:      9  Indicates whether contents of Region 9 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_10:1;       /**< bit:     10  Indicates whether contents of Region 10 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t SAF_PROT_DIRTY_11:1;       /**< bit:     11  Indicates whether contents of Region 11 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t :20;                       /**< bit: 12..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_DIRTY_:12;        /**< bit:  0..11  Indicates whether contents of Region xx have been changed.         x=There has been no Write or Erase performed in this region since this bit was last cleared.         x=A Write or Erase has been performed in this region since this bit was last cleared. */
    uint32_t :20;                       /**< bit: 12..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_PROTECT_DIRTY_bits_t;
#define SAFBC_PROTECT_DIRTY_RESETVALUE      (0x00U)                                       /**<  (SAFBC_PROTECT_DIRTY) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register.  Reset Value */

#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_0_Pos (0)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 0 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_0_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_0_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 0 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_1_Pos (1)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 1 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_1_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_1_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 1 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_2_Pos (2)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 2 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_2_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_2_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 2 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_3_Pos (3)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 3 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_3_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_3_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 3 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_4_Pos (4)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 4 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_4_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_4_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 4 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_5_Pos (5)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 5 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_5_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_5_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 5 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_6_Pos (6)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 6 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_6_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_6_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 6 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_7_Pos (7)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 7 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_7_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_7_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 7 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_8_Pos (8)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 8 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_8_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_8_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 8 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_9_Pos (9)                                            /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 9 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_9_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_9_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 9 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_10_Pos (10)                                           /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 10 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_10_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_10_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 10 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_11_Pos (11)                                           /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 11 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Position */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_11_Msk (0x1U << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_11_Pos)  /**< (SAFBC_PROTECT_DIRTY) Indicates whether contents of Region 11 have been changed.         0=There has been no Write or Erase performed in this region since this bit was last cleared.         1=A Write or Erase has been performed in this region since this bit was last cleared. Mask */
#define SAFBC_PROTECT_DIRTY_Msk               (0x00000FFFUL)                                 /**< (SAFBC_PROTECT_DIRTY) Register Mask  */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY__Pos (0)                                            /**< (SAFBC_PROTECT_DIRTY Position) Indicates whether contents of Region xx have been changed.         x=There has been no Write or Erase performed in this region since this bit was last cleared.         x=A Write or Erase has been performed in this region since this bit was last cleared. */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY__Msk (0xFFFU << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY__Pos)  /**< (SAFBC_PROTECT_DIRTY Mask) SAF_PROT_DIRTY_ */
#define SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY_(value) (SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY__Msk & ((value) << SAFBC_PROTECT_DIRTY_SAF_PROT_DIRTY__Pos))

/* -------- SAFBC_TAGMAP0 : (SAFBC Offset: 0x78) (R/W 32) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen. -------- */

typedef union
{
  struct
  {
    uint32_t STM_0:3;                   /**< bit:   0..2  This bit contains the mapping of the 4-bit eSPI Tag value 0h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:      3  Reserved                                      */
    uint32_t STM_1:3;                   /**< bit:   4..6  This bit contains the mapping of the 4-bit eSPI Tag value 1h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:      7  Reserved                                      */
    uint32_t STM_2:3;                   /**< bit:  8..10  This bit contains the mapping of the 4-bit eSPI Tag value 2h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     11  Reserved                                      */
    uint32_t STM_3:3;                   /**< bit: 12..14  This bit contains the mapping of the 4-bit eSPI Tag value 3h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     15  Reserved                                      */
    uint32_t STM_4:3;                   /**< bit: 16..18  This bit contains the mapping of the 4-bit eSPI Tag value 4h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     19  Reserved                                      */
    uint32_t STM_5:3;                   /**< bit: 20..22  This bit contains the mapping of the 4-bit eSPI Tag value 5h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     23  Reserved                                      */
    uint32_t STM_6:3;                   /**< bit: 24..26  This bit contains the mapping of the 4-bit eSPI Tag value 6h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     27  Reserved                                      */
    uint32_t STM_7:3;                   /**< bit: 28..30  This bit contains the mapping of the 4-bit eSPI Tag value 7h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_TAGMAP0_bits_t;
#define SAFBC_TAGMAP0_RESETVALUE            (0x23221100U)                                 /**<  (SAFBC_TAGMAP0) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen.  Reset Value */

#define SAFBC_TAGMAP0_STM_0_Pos               (0)                                            /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 0h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_0_Msk               (0x7U << SAFBC_TAGMAP0_STM_0_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 0h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_0(value)            (SAFBC_TAGMAP0_STM_0_Msk & ((value) << SAFBC_TAGMAP0_STM_0_Pos))
#define SAFBC_TAGMAP0_STM_1_Pos               (4)                                            /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 1h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_1_Msk               (0x7U << SAFBC_TAGMAP0_STM_1_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 1h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_1(value)            (SAFBC_TAGMAP0_STM_1_Msk & ((value) << SAFBC_TAGMAP0_STM_1_Pos))
#define SAFBC_TAGMAP0_STM_2_Pos               (8)                                            /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 2h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_2_Msk               (0x7U << SAFBC_TAGMAP0_STM_2_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 2h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_2(value)            (SAFBC_TAGMAP0_STM_2_Msk & ((value) << SAFBC_TAGMAP0_STM_2_Pos))
#define SAFBC_TAGMAP0_STM_3_Pos               (12)                                           /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 3h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_3_Msk               (0x7U << SAFBC_TAGMAP0_STM_3_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 3h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_3(value)            (SAFBC_TAGMAP0_STM_3_Msk & ((value) << SAFBC_TAGMAP0_STM_3_Pos))
#define SAFBC_TAGMAP0_STM_4_Pos               (16)                                           /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 4h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_4_Msk               (0x7U << SAFBC_TAGMAP0_STM_4_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 4h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_4(value)            (SAFBC_TAGMAP0_STM_4_Msk & ((value) << SAFBC_TAGMAP0_STM_4_Pos))
#define SAFBC_TAGMAP0_STM_5_Pos               (20)                                           /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 5h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_5_Msk               (0x7U << SAFBC_TAGMAP0_STM_5_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 5h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_5(value)            (SAFBC_TAGMAP0_STM_5_Msk & ((value) << SAFBC_TAGMAP0_STM_5_Pos))
#define SAFBC_TAGMAP0_STM_6_Pos               (24)                                           /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 6h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_6_Msk               (0x7U << SAFBC_TAGMAP0_STM_6_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 6h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_6(value)            (SAFBC_TAGMAP0_STM_6_Msk & ((value) << SAFBC_TAGMAP0_STM_6_Pos))
#define SAFBC_TAGMAP0_STM_7_Pos               (28)                                           /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 7h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP0_STM_7_Msk               (0x7U << SAFBC_TAGMAP0_STM_7_Pos)              /**< (SAFBC_TAGMAP0) This bit contains the mapping of the 4-bit eSPI Tag value 7h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP0_STM_7(value)            (SAFBC_TAGMAP0_STM_7_Msk & ((value) << SAFBC_TAGMAP0_STM_7_Pos))
#define SAFBC_TAGMAP0_Msk                     (0x77777777UL)                                 /**< (SAFBC_TAGMAP0) Register Mask  */

/* -------- SAFBC_TAGMAP1 : (SAFBC Offset: 0x7c) (R/W 32) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen. -------- */

typedef union
{
  struct
  {
    uint32_t STM_8:3;                   /**< bit:   0..2  This bit contains the mapping of the 4-bit eSPI Tag value 8h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:      3  Reserved                                      */
    uint32_t STM_9:3;                   /**< bit:   4..6  This bit contains the mapping of the 4-bit eSPI Tag value 9h to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:      7  Reserved                                      */
    uint32_t STM_A:3;                   /**< bit:  8..10  This bit contains the mapping of the 4-bit eSPI Tag value Ah to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     11  Reserved                                      */
    uint32_t STM_B:3;                   /**< bit: 12..14  This bit contains the mapping of the 4-bit eSPI Tag value Bh to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     15  Reserved                                      */
    uint32_t STM_C:3;                   /**< bit: 16..18  This bit contains the mapping of the 4-bit eSPI Tag value Ch to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     19  Reserved                                      */
    uint32_t STM_D:3;                   /**< bit: 20..22  This bit contains the mapping of the 4-bit eSPI Tag value Dh to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     23  Reserved                                      */
    uint32_t STM_E:3;                   /**< bit: 24..26  This bit contains the mapping of the 4-bit eSPI Tag value Eh to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     27  Reserved                                      */
    uint32_t STM_F:3;                   /**< bit: 28..30  This bit contains the mapping of the 4-bit eSPI Tag value Fh to its 3-bit Protection Master         number. */
    uint32_t :1;                        /**< bit:     31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_TAGMAP1_bits_t;
#define SAFBC_TAGMAP1_RESETVALUE            (0x77677767U)                                 /**<  (SAFBC_TAGMAP1) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen.  Reset Value */

#define SAFBC_TAGMAP1_STM_8_Pos               (0)                                            /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value 8h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_8_Msk               (0x7U << SAFBC_TAGMAP1_STM_8_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value 8h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_8(value)            (SAFBC_TAGMAP1_STM_8_Msk & ((value) << SAFBC_TAGMAP1_STM_8_Pos))
#define SAFBC_TAGMAP1_STM_9_Pos               (4)                                            /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value 9h to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_9_Msk               (0x7U << SAFBC_TAGMAP1_STM_9_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value 9h to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_9(value)            (SAFBC_TAGMAP1_STM_9_Msk & ((value) << SAFBC_TAGMAP1_STM_9_Pos))
#define SAFBC_TAGMAP1_STM_A_Pos               (8)                                            /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ah to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_A_Msk               (0x7U << SAFBC_TAGMAP1_STM_A_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ah to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_A(value)            (SAFBC_TAGMAP1_STM_A_Msk & ((value) << SAFBC_TAGMAP1_STM_A_Pos))
#define SAFBC_TAGMAP1_STM_B_Pos               (12)                                           /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Bh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_B_Msk               (0x7U << SAFBC_TAGMAP1_STM_B_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Bh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_B(value)            (SAFBC_TAGMAP1_STM_B_Msk & ((value) << SAFBC_TAGMAP1_STM_B_Pos))
#define SAFBC_TAGMAP1_STM_C_Pos               (16)                                           /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ch to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_C_Msk               (0x7U << SAFBC_TAGMAP1_STM_C_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Ch to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_C(value)            (SAFBC_TAGMAP1_STM_C_Msk & ((value) << SAFBC_TAGMAP1_STM_C_Pos))
#define SAFBC_TAGMAP1_STM_D_Pos               (20)                                           /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Dh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_D_Msk               (0x7U << SAFBC_TAGMAP1_STM_D_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Dh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_D(value)            (SAFBC_TAGMAP1_STM_D_Msk & ((value) << SAFBC_TAGMAP1_STM_D_Pos))
#define SAFBC_TAGMAP1_STM_E_Pos               (24)                                           /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Eh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_E_Msk               (0x7U << SAFBC_TAGMAP1_STM_E_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Eh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_E(value)            (SAFBC_TAGMAP1_STM_E_Msk & ((value) << SAFBC_TAGMAP1_STM_E_Pos))
#define SAFBC_TAGMAP1_STM_F_Pos               (28)                                           /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Fh to its 3-bit Protection Master         number. Position */
#define SAFBC_TAGMAP1_STM_F_Msk               (0x7U << SAFBC_TAGMAP1_STM_F_Pos)              /**< (SAFBC_TAGMAP1) This bit contains the mapping of the 4-bit eSPI Tag value Fh to its 3-bit Protection Master         number. Mask */
#define SAFBC_TAGMAP1_STM_F(value)            (SAFBC_TAGMAP1_STM_F_Msk & ((value) << SAFBC_TAGMAP1_STM_F_Pos))
#define SAFBC_TAGMAP1_Msk                     (0x77777777UL)                                 /**< (SAFBC_TAGMAP1) Register Mask  */

/* -------- SAFBC_TAGMAP2 : (SAFBC Offset: 0x80) (R/W 32) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later. -------- */

typedef union
{
  struct
  {
    uint32_t SM_EC:3;                   /**< bit:   0..2  This bit maps the 3-bit Protection Master number assigned to EC Firmware accesses. */
    uint32_t :28;                       /**< bit:  3..30  Reserved                                      */
    uint32_t STM_LK:1;                  /**< bit:     31  1 Locks all bits in the Tag Map Registers, including this bit.              0 (Default) keeps all Tag Map Register fields R/W. */
  };
  uint32_t w;
} __SAFBC_TAGMAP2_bits_t;
#define SAFBC_TAGMAP2_RESETVALUE            (0x05U)                                       /**<  (SAFBC_TAGMAP2) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later.  Reset Value */

#define SAFBC_TAGMAP2_SM_EC_Pos               (0)                                            /**< (SAFBC_TAGMAP2) This bit maps the 3-bit Protection Master number assigned to EC Firmware accesses. Position */
#define SAFBC_TAGMAP2_SM_EC_Msk               (0x7U << SAFBC_TAGMAP2_SM_EC_Pos)              /**< (SAFBC_TAGMAP2) This bit maps the 3-bit Protection Master number assigned to EC Firmware accesses. Mask */
#define SAFBC_TAGMAP2_SM_EC(value)            (SAFBC_TAGMAP2_SM_EC_Msk & ((value) << SAFBC_TAGMAP2_SM_EC_Pos))
#define SAFBC_TAGMAP2_STM_LK_Pos              (31)                                           /**< (SAFBC_TAGMAP2) 1 Locks all bits in the Tag Map Registers, including this bit.              0 (Default) keeps all Tag Map Register fields R/W. Position */
#define SAFBC_TAGMAP2_STM_LK_Msk              (0x1U << SAFBC_TAGMAP2_STM_LK_Pos)             /**< (SAFBC_TAGMAP2) 1 Locks all bits in the Tag Map Registers, including this bit.              0 (Default) keeps all Tag Map Register fields R/W. Mask */
#define SAFBC_TAGMAP2_Msk                     (0x80000007UL)                                 /**< (SAFBC_TAGMAP2) Register Mask  */

/* -------- SAFBC_START00 : (SAFBC Offset: 0x84) (R/W 32) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START00_bits_t;
#define SAFBC_START00_RESETVALUE            (0x7FFFU)                                     /**<  (SAFBC_START00) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START00_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START00) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START00_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START00_SAF_PROT_START_Pos)  /**< (SAFBC_START00) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START00_SAF_PROT_START(value)   (SAFBC_START00_SAF_PROT_START_Msk & ((value) << SAFBC_START00_SAF_PROT_START_Pos))
#define SAFBC_START00_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START00) Register Mask  */

/* -------- SAFBC_LIMIT00 : (SAFBC Offset: 0x88) (R/W 32) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT00_bits_t;
#define SAFBC_LIMIT00_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT00) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT00_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT00) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT00_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT00_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT00) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT00_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT00_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT00_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT00_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT00) Register Mask  */

/* -------- SAFBC_WRITE00 : (SAFBC Offset: 0x8c) (R/W 32) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE00_bits_t;
#define SAFBC_WRITE00_RESETVALUE            (0x01U)                                       /**<  (SAFBC_WRITE00) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE00_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE00_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE00_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE00) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE00_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE00) Register Mask  */
#define SAFBC_WRITE00_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE00 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE00_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE00_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE00 Mask) SAF_PROT_WR */
#define SAFBC_WRITE00_SAF_PROT_WR(value)      (SAFBC_WRITE00_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE00_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ00 : (SAFBC Offset: 0x90) (R/W 32) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ00_bits_t;
#define SAFBC_READ00_RESETVALUE             (0x01U)                                       /**<  (SAFBC_READ00) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ00_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ00_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ00_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ00_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ00) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ00_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ00) Register Mask  */
#define SAFBC_READ00_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ00 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ00_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ00_SAF_PROT_RD_Pos)        /**< (SAFBC_READ00 Mask) SAF_PROT_RD */
#define SAFBC_READ00_SAF_PROT_RD(value)       (SAFBC_READ00_SAF_PROT_RD_Msk & ((value) << SAFBC_READ00_SAF_PROT_RD_Pos))

/* -------- SAFBC_START01 : (SAFBC Offset: 0x94) (R/W 32) This is Start01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START01_bits_t;
#define SAFBC_START01_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START01) This is Start01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START01_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START01) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START01_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START01_SAF_PROT_START_Pos)  /**< (SAFBC_START01) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START01_SAF_PROT_START(value)   (SAFBC_START01_SAF_PROT_START_Msk & ((value) << SAFBC_START01_SAF_PROT_START_Pos))
#define SAFBC_START01_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START01) Register Mask  */

/* -------- SAFBC_LIMIT01 : (SAFBC Offset: 0x98) (R/W 32) This is Limit01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT01_bits_t;
#define SAFBC_LIMIT01_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT01) This is Limit01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT01_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT01) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT01_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT01_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT01) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT01_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT01_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT01_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT01_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT01) Register Mask  */

/* -------- SAFBC_WRITE01 : (SAFBC Offset: 0x9c) (R/W 32) This is Write01 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE01_bits_t;
#define SAFBC_WRITE01_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE01) This is Write01 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE01_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE01_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE01_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE01) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE01_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE01) Register Mask  */
#define SAFBC_WRITE01_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE01 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE01_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE01_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE01 Mask) SAF_PROT_WR */
#define SAFBC_WRITE01_SAF_PROT_WR(value)      (SAFBC_WRITE01_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE01_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ01 : (SAFBC Offset: 0xa0) (R/W 32) This is Read01 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ01_bits_t;
#define SAFBC_READ01_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ01) This is Read01 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ01_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ01_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ01_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ01_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ01) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ01_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ01) Register Mask  */
#define SAFBC_READ01_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ01 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ01_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ01_SAF_PROT_RD_Pos)        /**< (SAFBC_READ01 Mask) SAF_PROT_RD */
#define SAFBC_READ01_SAF_PROT_RD(value)       (SAFBC_READ01_SAF_PROT_RD_Msk & ((value) << SAFBC_READ01_SAF_PROT_RD_Pos))

/* -------- SAFBC_START02 : (SAFBC Offset: 0xa4) (R/W 32) This is Start02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START02_bits_t;
#define SAFBC_START02_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START02) This is Start02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START02_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START02) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START02_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START02_SAF_PROT_START_Pos)  /**< (SAFBC_START02) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START02_SAF_PROT_START(value)   (SAFBC_START02_SAF_PROT_START_Msk & ((value) << SAFBC_START02_SAF_PROT_START_Pos))
#define SAFBC_START02_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START02) Register Mask  */

/* -------- SAFBC_LIMIT02 : (SAFBC Offset: 0xa8) (R/W 32) This is Limit02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT02_bits_t;
#define SAFBC_LIMIT02_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT02) This is Limit02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT02_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT02) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT02_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT02_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT02) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT02_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT02_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT02_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT02_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT02) Register Mask  */

/* -------- SAFBC_WRITE02 : (SAFBC Offset: 0xac) (R/W 32) This is Write02 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE02_bits_t;
#define SAFBC_WRITE02_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE02) This is Write02 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE02_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE02_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE02_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE02) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE02_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE02) Register Mask  */
#define SAFBC_WRITE02_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE02 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE02_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE02_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE02 Mask) SAF_PROT_WR */
#define SAFBC_WRITE02_SAF_PROT_WR(value)      (SAFBC_WRITE02_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE02_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ02 : (SAFBC Offset: 0xb0) (R/W 32) This is Read02 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ02_bits_t;
#define SAFBC_READ02_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ02) This is Read02 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ02_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ02_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ02_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ02_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ02) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ02_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ02) Register Mask  */
#define SAFBC_READ02_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ02 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ02_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ02_SAF_PROT_RD_Pos)        /**< (SAFBC_READ02 Mask) SAF_PROT_RD */
#define SAFBC_READ02_SAF_PROT_RD(value)       (SAFBC_READ02_SAF_PROT_RD_Msk & ((value) << SAFBC_READ02_SAF_PROT_RD_Pos))

/* -------- SAFBC_START03 : (SAFBC Offset: 0xb4) (R/W 32) This is Start03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START03_bits_t;
#define SAFBC_START03_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START03) This is Start03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START03_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START03) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START03_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START03_SAF_PROT_START_Pos)  /**< (SAFBC_START03) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START03_SAF_PROT_START(value)   (SAFBC_START03_SAF_PROT_START_Msk & ((value) << SAFBC_START03_SAF_PROT_START_Pos))
#define SAFBC_START03_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START03) Register Mask  */

/* -------- SAFBC_LIMIT03 : (SAFBC Offset: 0xb8) (R/W 32) This is Limit03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT03_bits_t;
#define SAFBC_LIMIT03_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT03) This is Limit03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT03_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT03) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT03_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT03_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT03) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT03_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT03_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT03_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT03_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT03) Register Mask  */

/* -------- SAFBC_WRITE03 : (SAFBC Offset: 0xbc) (R/W 32) This is Write03 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE03_bits_t;
#define SAFBC_WRITE03_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE03) This is Write03 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE03_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE03_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE03_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE03) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE03_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE03) Register Mask  */
#define SAFBC_WRITE03_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE03 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE03_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE03_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE03 Mask) SAF_PROT_WR */
#define SAFBC_WRITE03_SAF_PROT_WR(value)      (SAFBC_WRITE03_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE03_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ03 : (SAFBC Offset: 0xc0) (R/W 32) This is Read03 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ03_bits_t;
#define SAFBC_READ03_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ03) This is Read03 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ03_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ03_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ03_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ03_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ03) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ03_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ03) Register Mask  */
#define SAFBC_READ03_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ03 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ03_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ03_SAF_PROT_RD_Pos)        /**< (SAFBC_READ03 Mask) SAF_PROT_RD */
#define SAFBC_READ03_SAF_PROT_RD(value)       (SAFBC_READ03_SAF_PROT_RD_Msk & ((value) << SAFBC_READ03_SAF_PROT_RD_Pos))

/* -------- SAFBC_START04 : (SAFBC Offset: 0xc4) (R/W 32) This is Start04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START04_bits_t;
#define SAFBC_START04_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START04) This is Start04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START04_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START04) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START04_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START04_SAF_PROT_START_Pos)  /**< (SAFBC_START04) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START04_SAF_PROT_START(value)   (SAFBC_START04_SAF_PROT_START_Msk & ((value) << SAFBC_START04_SAF_PROT_START_Pos))
#define SAFBC_START04_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START04) Register Mask  */

/* -------- SAFBC_LIMIT04 : (SAFBC Offset: 0xc8) (R/W 32) This is Limit04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT04_bits_t;
#define SAFBC_LIMIT04_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT04) This is Limit04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT04_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT04) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT04_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT04_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT04) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT04_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT04_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT04_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT04_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT04) Register Mask  */

/* -------- SAFBC_WRITE04 : (SAFBC Offset: 0xcc) (R/W 32) This is Write04 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE04_bits_t;
#define SAFBC_WRITE04_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE04) This is Write04 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE04_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE04_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE04_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE04) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE04_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE04) Register Mask  */
#define SAFBC_WRITE04_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE04 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE04_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE04_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE04 Mask) SAF_PROT_WR */
#define SAFBC_WRITE04_SAF_PROT_WR(value)      (SAFBC_WRITE04_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE04_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ04 : (SAFBC Offset: 0xd0) (R/W 32) This is Read04 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ04_bits_t;
#define SAFBC_READ04_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ04) This is Read04 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ04_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ04_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ04_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ04_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ04) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ04_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ04) Register Mask  */
#define SAFBC_READ04_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ04 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ04_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ04_SAF_PROT_RD_Pos)        /**< (SAFBC_READ04 Mask) SAF_PROT_RD */
#define SAFBC_READ04_SAF_PROT_RD(value)       (SAFBC_READ04_SAF_PROT_RD_Msk & ((value) << SAFBC_READ04_SAF_PROT_RD_Pos))

/* -------- SAFBC_START05 : (SAFBC Offset: 0xd4) (R/W 32) This is Start05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START05_bits_t;
#define SAFBC_START05_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START05) This is Start05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START05_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START05) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START05_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START05_SAF_PROT_START_Pos)  /**< (SAFBC_START05) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START05_SAF_PROT_START(value)   (SAFBC_START05_SAF_PROT_START_Msk & ((value) << SAFBC_START05_SAF_PROT_START_Pos))
#define SAFBC_START05_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START05) Register Mask  */

/* -------- SAFBC_LIMIT05 : (SAFBC Offset: 0xd8) (R/W 32) This is Limit05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT05_bits_t;
#define SAFBC_LIMIT05_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT05) This is Limit05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT05_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT05) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT05_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT05_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT05) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT05_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT05_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT05_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT05_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT05) Register Mask  */

/* -------- SAFBC_WRITE05 : (SAFBC Offset: 0xdc) (R/W 32) This is Write05 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE05_bits_t;
#define SAFBC_WRITE05_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE05) This is Write05 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE05_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE05_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE05_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE05) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE05_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE05) Register Mask  */
#define SAFBC_WRITE05_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE05 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE05_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE05_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE05 Mask) SAF_PROT_WR */
#define SAFBC_WRITE05_SAF_PROT_WR(value)      (SAFBC_WRITE05_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE05_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ05 : (SAFBC Offset: 0xe0) (R/W 32) This is Read05 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ05_bits_t;
#define SAFBC_READ05_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ05) This is Read05 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ05_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ05_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ05_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ05_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ05) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ05_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ05) Register Mask  */
#define SAFBC_READ05_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ05 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ05_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ05_SAF_PROT_RD_Pos)        /**< (SAFBC_READ05 Mask) SAF_PROT_RD */
#define SAFBC_READ05_SAF_PROT_RD(value)       (SAFBC_READ05_SAF_PROT_RD_Msk & ((value) << SAFBC_READ05_SAF_PROT_RD_Pos))

/* -------- SAFBC_START06 : (SAFBC Offset: 0xe4) (R/W 32) This is Start06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START06_bits_t;
#define SAFBC_START06_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START06) This is Start06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START06_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START06) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START06_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START06_SAF_PROT_START_Pos)  /**< (SAFBC_START06) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START06_SAF_PROT_START(value)   (SAFBC_START06_SAF_PROT_START_Msk & ((value) << SAFBC_START06_SAF_PROT_START_Pos))
#define SAFBC_START06_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START06) Register Mask  */

/* -------- SAFBC_LIMIT06 : (SAFBC Offset: 0xe8) (R/W 32) This is Limit06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT06_bits_t;
#define SAFBC_LIMIT06_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT06) This is Limit06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT06_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT06) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT06_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT06_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT06) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT06_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT06_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT06_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT06_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT06) Register Mask  */

/* -------- SAFBC_WRITE06 : (SAFBC Offset: 0xec) (R/W 32) This is Write06 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE06_bits_t;
#define SAFBC_WRITE06_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE06) This is Write06 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE06_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE06_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE06_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE06) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE06_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE06) Register Mask  */
#define SAFBC_WRITE06_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE06 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE06_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE06_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE06 Mask) SAF_PROT_WR */
#define SAFBC_WRITE06_SAF_PROT_WR(value)      (SAFBC_WRITE06_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE06_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ06 : (SAFBC Offset: 0xf0) (R/W 32) This is Read06 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ06_bits_t;
#define SAFBC_READ06_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ06) This is Read06 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ06_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ06_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ06_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ06_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ06) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ06_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ06) Register Mask  */
#define SAFBC_READ06_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ06 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ06_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ06_SAF_PROT_RD_Pos)        /**< (SAFBC_READ06 Mask) SAF_PROT_RD */
#define SAFBC_READ06_SAF_PROT_RD(value)       (SAFBC_READ06_SAF_PROT_RD_Msk & ((value) << SAFBC_READ06_SAF_PROT_RD_Pos))

/* -------- SAFBC_START07 : (SAFBC Offset: 0xf4) (R/W 32) This is Start07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START07_bits_t;
#define SAFBC_START07_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START07) This is Start07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START07_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START07) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START07_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START07_SAF_PROT_START_Pos)  /**< (SAFBC_START07) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START07_SAF_PROT_START(value)   (SAFBC_START07_SAF_PROT_START_Msk & ((value) << SAFBC_START07_SAF_PROT_START_Pos))
#define SAFBC_START07_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START07) Register Mask  */

/* -------- SAFBC_LIMIT07 : (SAFBC Offset: 0xf8) (R/W 32) This is Limit07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT07_bits_t;
#define SAFBC_LIMIT07_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT07) This is Limit07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT07_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT07) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT07_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT07_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT07) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT07_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT07_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT07_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT07_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT07) Register Mask  */

/* -------- SAFBC_WRITE07 : (SAFBC Offset: 0xfc) (R/W 32) This is Write07 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE07_bits_t;
#define SAFBC_WRITE07_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE07) This is Write07 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE07_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE07_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE07_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE07) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE07_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE07) Register Mask  */
#define SAFBC_WRITE07_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE07 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE07_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE07_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE07 Mask) SAF_PROT_WR */
#define SAFBC_WRITE07_SAF_PROT_WR(value)      (SAFBC_WRITE07_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE07_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ07 : (SAFBC Offset: 0x100) (R/W 32) This is Read07 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ07_bits_t;
#define SAFBC_READ07_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ07) This is Read07 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ07_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ07_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ07_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ07_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ07) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ07_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ07) Register Mask  */
#define SAFBC_READ07_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ07 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ07_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ07_SAF_PROT_RD_Pos)        /**< (SAFBC_READ07 Mask) SAF_PROT_RD */
#define SAFBC_READ07_SAF_PROT_RD(value)       (SAFBC_READ07_SAF_PROT_RD_Msk & ((value) << SAFBC_READ07_SAF_PROT_RD_Pos))

/* -------- SAFBC_START08 : (SAFBC Offset: 0x104) (R/W 32) This is Start08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START08_bits_t;
#define SAFBC_START08_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START08) This is Start08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START08_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START08) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START08_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START08_SAF_PROT_START_Pos)  /**< (SAFBC_START08) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START08_SAF_PROT_START(value)   (SAFBC_START08_SAF_PROT_START_Msk & ((value) << SAFBC_START08_SAF_PROT_START_Pos))
#define SAFBC_START08_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START08) Register Mask  */

/* -------- SAFBC_LIMIT08 : (SAFBC Offset: 0x108) (R/W 32) This is Limit08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT08_bits_t;
#define SAFBC_LIMIT08_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT08) This is Limit08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT08_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT08) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT08_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT08_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT08) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT08_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT08_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT08_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT08_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT08) Register Mask  */

/* -------- SAFBC_WRITE08 : (SAFBC Offset: 0x10c) (R/W 32) This is Write08 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE08_bits_t;
#define SAFBC_WRITE08_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE08) This is Write08 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE08_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE08_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE08_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE08) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE08_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE08) Register Mask  */
#define SAFBC_WRITE08_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE08 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE08_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE08_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE08 Mask) SAF_PROT_WR */
#define SAFBC_WRITE08_SAF_PROT_WR(value)      (SAFBC_WRITE08_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE08_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ08 : (SAFBC Offset: 0x110) (R/W 32) This is Read08 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ08_bits_t;
#define SAFBC_READ08_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ08) This is Read08 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ08_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ08_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ08_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ08_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ08) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ08_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ08) Register Mask  */
#define SAFBC_READ08_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ08 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ08_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ08_SAF_PROT_RD_Pos)        /**< (SAFBC_READ08 Mask) SAF_PROT_RD */
#define SAFBC_READ08_SAF_PROT_RD(value)       (SAFBC_READ08_SAF_PROT_RD_Msk & ((value) << SAFBC_READ08_SAF_PROT_RD_Pos))

/* -------- SAFBC_START09 : (SAFBC Offset: 0x114) (R/W 32) This is Start09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START09_bits_t;
#define SAFBC_START09_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START09) This is Start09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START09_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START09) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START09_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START09_SAF_PROT_START_Pos)  /**< (SAFBC_START09) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START09_SAF_PROT_START(value)   (SAFBC_START09_SAF_PROT_START_Msk & ((value) << SAFBC_START09_SAF_PROT_START_Pos))
#define SAFBC_START09_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START09) Register Mask  */

/* -------- SAFBC_LIMIT09 : (SAFBC Offset: 0x118) (R/W 32) This is Limit09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT09_bits_t;
#define SAFBC_LIMIT09_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT09) This is Limit09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT09_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT09) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT09_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT09_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT09) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT09_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT09_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT09_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT09_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT09) Register Mask  */

/* -------- SAFBC_WRITE09 : (SAFBC Offset: 0x11c) (R/W 32) This is Write09 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE09_bits_t;
#define SAFBC_WRITE09_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE09) This is Write09 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE09_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE09_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE09_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE09) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE09_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE09) Register Mask  */
#define SAFBC_WRITE09_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE09 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE09_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE09_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE09 Mask) SAF_PROT_WR */
#define SAFBC_WRITE09_SAF_PROT_WR(value)      (SAFBC_WRITE09_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE09_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ09 : (SAFBC Offset: 0x120) (R/W 32) This is Read09 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ09_bits_t;
#define SAFBC_READ09_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ09) This is Read09 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ09_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ09_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ09_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ09_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ09) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ09_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ09) Register Mask  */
#define SAFBC_READ09_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ09 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ09_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ09_SAF_PROT_RD_Pos)        /**< (SAFBC_READ09 Mask) SAF_PROT_RD */
#define SAFBC_READ09_SAF_PROT_RD(value)       (SAFBC_READ09_SAF_PROT_RD_Msk & ((value) << SAFBC_READ09_SAF_PROT_RD_Pos))

/* -------- SAFBC_START10 : (SAFBC Offset: 0x124) (R/W 32) This is Start10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START10_bits_t;
#define SAFBC_START10_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START10) This is Start10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START10_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START10) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START10_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START10_SAF_PROT_START_Pos)  /**< (SAFBC_START10) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START10_SAF_PROT_START(value)   (SAFBC_START10_SAF_PROT_START_Msk & ((value) << SAFBC_START10_SAF_PROT_START_Pos))
#define SAFBC_START10_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START10) Register Mask  */

/* -------- SAFBC_LIMIT10 : (SAFBC Offset: 0x128) (R/W 32) This is Limit10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT10_bits_t;
#define SAFBC_LIMIT10_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT10) This is Limit10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT10_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT10) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT10_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT10_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT10) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT10_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT10_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT10_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT10_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT10) Register Mask  */

/* -------- SAFBC_WRITE10 : (SAFBC Offset: 0x12c) (R/W 32) This is Write10 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE10_bits_t;
#define SAFBC_WRITE10_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE10) This is Write10 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE10_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE10_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE10_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE10) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE10_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE10) Register Mask  */
#define SAFBC_WRITE10_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE10 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE10_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE10_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE10 Mask) SAF_PROT_WR */
#define SAFBC_WRITE10_SAF_PROT_WR(value)      (SAFBC_WRITE10_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE10_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ10 : (SAFBC Offset: 0x130) (R/W 32) This is Read10 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ10_bits_t;
#define SAFBC_READ10_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ10) This is Read10 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ10_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ10_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ10_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ10_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ10) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ10_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ10) Register Mask  */
#define SAFBC_READ10_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ10 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ10_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ10_SAF_PROT_RD_Pos)        /**< (SAFBC_READ10 Mask) SAF_PROT_RD */
#define SAFBC_READ10_SAF_PROT_RD(value)       (SAFBC_READ10_SAF_PROT_RD_Msk & ((value) << SAFBC_READ10_SAF_PROT_RD_Pos))

/* -------- SAFBC_START11 : (SAFBC Offset: 0x134) (R/W 32) This is Start11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START11_bits_t;
#define SAFBC_START11_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START11) This is Start11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START11_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START11) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START11_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START11_SAF_PROT_START_Pos)  /**< (SAFBC_START11) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START11_SAF_PROT_START(value)   (SAFBC_START11_SAF_PROT_START_Msk & ((value) << SAFBC_START11_SAF_PROT_START_Pos))
#define SAFBC_START11_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START11) Register Mask  */

/* -------- SAFBC_LIMIT11 : (SAFBC Offset: 0x138) (R/W 32) This is Limit11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT11_bits_t;
#define SAFBC_LIMIT11_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT11) This is Limit11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT11_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT11) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT11_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT11_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT11) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT11_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT11_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT11_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT11_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT11) Register Mask  */

/* -------- SAFBC_WRITE11 : (SAFBC Offset: 0x13c) (R/W 32) This is Write11 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE11_bits_t;
#define SAFBC_WRITE11_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE11) This is Write11 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE11_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE11_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE11_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE11) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE11_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE11) Register Mask  */
#define SAFBC_WRITE11_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE11 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE11_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE11_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE11 Mask) SAF_PROT_WR */
#define SAFBC_WRITE11_SAF_PROT_WR(value)      (SAFBC_WRITE11_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE11_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ11 : (SAFBC Offset: 0x140) (R/W 32) This is Read11 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ11_bits_t;
#define SAFBC_READ11_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ11) This is Read11 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ11_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ11_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ11_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ11_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ11) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ11_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ11) Register Mask  */
#define SAFBC_READ11_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ11 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ11_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ11_SAF_PROT_RD_Pos)        /**< (SAFBC_READ11 Mask) SAF_PROT_RD */
#define SAFBC_READ11_SAF_PROT_RD(value)       (SAFBC_READ11_SAF_PROT_RD_Msk & ((value) << SAFBC_READ11_SAF_PROT_RD_Pos))

/* -------- SAFBC_START12 : (SAFBC Offset: 0x144) (R/W 32) This is Start12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START12_bits_t;
#define SAFBC_START12_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START12) This is Start12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START12_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START12) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START12_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START12_SAF_PROT_START_Pos)  /**< (SAFBC_START12) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START12_SAF_PROT_START(value)   (SAFBC_START12_SAF_PROT_START_Msk & ((value) << SAFBC_START12_SAF_PROT_START_Pos))
#define SAFBC_START12_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START12) Register Mask  */

/* -------- SAFBC_LIMIT12 : (SAFBC Offset: 0x148) (R/W 32) This is Limit12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT12_bits_t;
#define SAFBC_LIMIT12_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT12) This is Limit12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT12_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT12) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT12_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT12_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT12) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT12_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT12_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT12_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT12_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT12) Register Mask  */

/* -------- SAFBC_WRITE12 : (SAFBC Offset: 0x14c) (R/W 32) This is Write12 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE12_bits_t;
#define SAFBC_WRITE12_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE12) This is Write12 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE12_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE12_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE12_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE12) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE12_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE12) Register Mask  */
#define SAFBC_WRITE12_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE12 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE12_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE12_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE12 Mask) SAF_PROT_WR */
#define SAFBC_WRITE12_SAF_PROT_WR(value)      (SAFBC_WRITE12_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE12_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ12 : (SAFBC Offset: 0x150) (R/W 32) This is Read12 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ12_bits_t;
#define SAFBC_READ12_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ12) This is Read12 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ12_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ12_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ12_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ12_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ12) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ12_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ12) Register Mask  */
#define SAFBC_READ12_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ12 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ12_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ12_SAF_PROT_RD_Pos)        /**< (SAFBC_READ12 Mask) SAF_PROT_RD */
#define SAFBC_READ12_SAF_PROT_RD(value)       (SAFBC_READ12_SAF_PROT_RD_Msk & ((value) << SAFBC_READ12_SAF_PROT_RD_Pos))

/* -------- SAFBC_START13 : (SAFBC Offset: 0x154) (R/W 32) This is Start13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START13_bits_t;
#define SAFBC_START13_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START13) This is Start13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START13_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START13) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START13_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START13_SAF_PROT_START_Pos)  /**< (SAFBC_START13) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START13_SAF_PROT_START(value)   (SAFBC_START13_SAF_PROT_START_Msk & ((value) << SAFBC_START13_SAF_PROT_START_Pos))
#define SAFBC_START13_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START13) Register Mask  */

/* -------- SAFBC_LIMIT13 : (SAFBC Offset: 0x158) (R/W 32) This is Limit13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT13_bits_t;
#define SAFBC_LIMIT13_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT13) This is Limit13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT13_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT13) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT13_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT13_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT13) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT13_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT13_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT13_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT13_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT13) Register Mask  */

/* -------- SAFBC_WRITE13 : (SAFBC Offset: 0x15c) (R/W 32) This is Write13 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE13_bits_t;
#define SAFBC_WRITE13_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE13) This is Write13 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE13_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE13_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE13_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE13) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE13_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE13) Register Mask  */
#define SAFBC_WRITE13_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE13 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE13_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE13_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE13 Mask) SAF_PROT_WR */
#define SAFBC_WRITE13_SAF_PROT_WR(value)      (SAFBC_WRITE13_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE13_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ13 : (SAFBC Offset: 0x160) (R/W 32) This is Read13 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ13_bits_t;
#define SAFBC_READ13_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ13) This is Read13 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ13_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ13_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ13_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ13_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ13) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ13_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ13) Register Mask  */
#define SAFBC_READ13_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ13 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ13_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ13_SAF_PROT_RD_Pos)        /**< (SAFBC_READ13 Mask) SAF_PROT_RD */
#define SAFBC_READ13_SAF_PROT_RD(value)       (SAFBC_READ13_SAF_PROT_RD_Msk & ((value) << SAFBC_READ13_SAF_PROT_RD_Pos))

/* -------- SAFBC_START14 : (SAFBC Offset: 0x164) (R/W 32) This is Start14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START14_bits_t;
#define SAFBC_START14_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START14) This is Start14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START14_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START14) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START14_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START14_SAF_PROT_START_Pos)  /**< (SAFBC_START14) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START14_SAF_PROT_START(value)   (SAFBC_START14_SAF_PROT_START_Msk & ((value) << SAFBC_START14_SAF_PROT_START_Pos))
#define SAFBC_START14_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START14) Register Mask  */

/* -------- SAFBC_LIMIT14 : (SAFBC Offset: 0x168) (R/W 32) This is Limit14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT14_bits_t;
#define SAFBC_LIMIT14_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT14) This is Limit14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT14_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT14) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT14_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT14_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT14) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT14_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT14_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT14_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT14_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT14) Register Mask  */

/* -------- SAFBC_WRITE14 : (SAFBC Offset: 0x16c) (R/W 32) This is Write14 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE14_bits_t;
#define SAFBC_WRITE14_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE14) This is Write14 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE14_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE14_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE14_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE14) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE14_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE14) Register Mask  */
#define SAFBC_WRITE14_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE14 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE14_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE14_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE14 Mask) SAF_PROT_WR */
#define SAFBC_WRITE14_SAF_PROT_WR(value)      (SAFBC_WRITE14_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE14_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ14 : (SAFBC Offset: 0x170) (R/W 32) This is Read14 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ14_bits_t;
#define SAFBC_READ14_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ14) This is Read14 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ14_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ14_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ14_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ14_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ14) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ14_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ14) Register Mask  */
#define SAFBC_READ14_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ14 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ14_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ14_SAF_PROT_RD_Pos)        /**< (SAFBC_READ14 Mask) SAF_PROT_RD */
#define SAFBC_READ14_SAF_PROT_RD(value)       (SAFBC_READ14_SAF_PROT_RD_Msk & ((value) << SAFBC_READ14_SAF_PROT_RD_Pos))

/* -------- SAFBC_START15 : (SAFBC Offset: 0x174) (R/W 32) This is Start15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START15_bits_t;
#define SAFBC_START15_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START15) This is Start15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START15_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START15) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START15_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START15_SAF_PROT_START_Pos)  /**< (SAFBC_START15) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START15_SAF_PROT_START(value)   (SAFBC_START15_SAF_PROT_START_Msk & ((value) << SAFBC_START15_SAF_PROT_START_Pos))
#define SAFBC_START15_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START15) Register Mask  */

/* -------- SAFBC_LIMIT15 : (SAFBC Offset: 0x178) (R/W 32) This is Limit15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT15_bits_t;
#define SAFBC_LIMIT15_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT15) This is Limit15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT15_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT15) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT15_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT15_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT15) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT15_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT15_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT15_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT15_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT15) Register Mask  */

/* -------- SAFBC_WRITE15 : (SAFBC Offset: 0x17c) (R/W 32) This is Write15 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE15_bits_t;
#define SAFBC_WRITE15_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE15) This is Write15 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE15_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE15_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE15_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE15) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE15_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE15) Register Mask  */
#define SAFBC_WRITE15_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE15 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE15_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE15_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE15 Mask) SAF_PROT_WR */
#define SAFBC_WRITE15_SAF_PROT_WR(value)      (SAFBC_WRITE15_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE15_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ15 : (SAFBC Offset: 0x180) (R/W 32) This is Read15 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ15_bits_t;
#define SAFBC_READ15_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ15) This is Read15 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ15_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ15_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ15_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ15_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ15) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ15_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ15) Register Mask  */
#define SAFBC_READ15_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ15 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ15_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ15_SAF_PROT_RD_Pos)        /**< (SAFBC_READ15 Mask) SAF_PROT_RD */
#define SAFBC_READ15_SAF_PROT_RD(value)       (SAFBC_READ15_SAF_PROT_RD_Msk & ((value) << SAFBC_READ15_SAF_PROT_RD_Pos))

/* -------- SAFBC_START16 : (SAFBC Offset: 0x184) (R/W 32) This is Start16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_START:20;         /**< bit:  0..19  This field contains the start address of this Region, in units of 4K bytes. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_START16_bits_t;
#define SAFBC_START16_RESETVALUE            (0x00U)                                       /**<  (SAFBC_START16) This is Start16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_START16_SAF_PROT_START_Pos      (0)                                            /**< (SAFBC_START16) This field contains the start address of this Region, in units of 4K bytes. Position */
#define SAFBC_START16_SAF_PROT_START_Msk      (0xFFFFFU << SAFBC_START16_SAF_PROT_START_Pos)  /**< (SAFBC_START16) This field contains the start address of this Region, in units of 4K bytes. Mask */
#define SAFBC_START16_SAF_PROT_START(value)   (SAFBC_START16_SAF_PROT_START_Msk & ((value) << SAFBC_START16_SAF_PROT_START_Pos))
#define SAFBC_START16_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_START16) Register Mask  */

/* -------- SAFBC_LIMIT16 : (SAFBC Offset: 0x188) (R/W 32) This is Limit16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_LIMIT:20;         /**< bit:  0..19  This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_LIMIT16_bits_t;
#define SAFBC_LIMIT16_RESETVALUE            (0x00U)                                       /**<  (SAFBC_LIMIT16) This is Limit16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5).  Reset Value */

#define SAFBC_LIMIT16_SAF_PROT_LIMIT_Pos      (0)                                            /**< (SAFBC_LIMIT16) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Position */
#define SAFBC_LIMIT16_SAF_PROT_LIMIT_Msk      (0xFFFFFU << SAFBC_LIMIT16_SAF_PROT_LIMIT_Pos)  /**< (SAFBC_LIMIT16) This field contains the limit address of this Region, in units of 4K bytes. The entire 4K         block identified is within the Region: that is, the final byte address is determined by appending         FFFh to this field. Mask */
#define SAFBC_LIMIT16_SAF_PROT_LIMIT(value)   (SAFBC_LIMIT16_SAF_PROT_LIMIT_Msk & ((value) << SAFBC_LIMIT16_SAF_PROT_LIMIT_Pos))
#define SAFBC_LIMIT16_Msk                     (0x000FFFFFUL)                                 /**< (SAFBC_LIMIT16) Register Mask  */

/* -------- SAFBC_WRITE16 : (SAFBC Offset: 0x18c) (R/W 32) This is Write16 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_WR0:1;            /**< bit:      0  This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. */
    uint32_t SAF_PROT_WR1:1;            /**< bit:      1  This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR2:1;            /**< bit:      2  This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR3:1;            /**< bit:      3  This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR4:1;            /**< bit:      4  This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR5:1;            /**< bit:      5  This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR6:1;            /**< bit:      6  This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. */
    uint32_t SAF_PROT_WR7:1;            /**< bit:      7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_WR:8;             /**< bit:   0..7  This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_WRITE16_bits_t;
#define SAFBC_WRITE16_RESETVALUE            (0x00U)                                       /**<  (SAFBC_WRITE16) This is Write16 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively.  Reset Value */

#define SAFBC_WRITE16_SAF_PROT_WR0_Pos        (0)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR0_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR0_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 0 to this         Region. It is a read-only '1' placeholder because Protection Master 0 has full access to all         Flash locations.          1=Protection Master 0 may always Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR1_Pos        (1)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR1_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR1_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 1 to this         Region.          0=Protection Master 1 may not Write or Erase in this region.         1=Protection Master 1 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR2_Pos        (2)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR2_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR2_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 2 to this         Region.          0=Protection Master 2 may not Write or Erase in this region.         1=Protection Master 2 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR3_Pos        (3)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR3_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR3_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 3 to this         Region.          0=Protection Master 3 may not Write or Erase in this region.         1=Protection Master 3 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR4_Pos        (4)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR4_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR4_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 4 to this         Region.          0=Protection Master 4 may not Write or Erase in this region.         1=Protection Master 4 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR5_Pos        (5)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR5_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR5_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 5 to this         Region.          0=Protection Master 5 may not Write or Erase in this region.         1=Protection Master 5 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR6_Pos        (6)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR6_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR6_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 6 to this         Region.          0=Protection Master 6 may not Write or Erase in this region.         1=Protection Master 6 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_SAF_PROT_WR7_Pos        (7)                                            /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Position */
#define SAFBC_WRITE16_SAF_PROT_WR7_Msk        (0x1U << SAFBC_WRITE16_SAF_PROT_WR7_Pos)       /**< (SAFBC_WRITE16) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          0=Protection Master 7 may not Write or Erase in this region.         1=Protection Master 7 may Write and Erase in this region. Mask */
#define SAFBC_WRITE16_Msk                     (0x000000FFUL)                                 /**< (SAFBC_WRITE16) Register Mask  */
#define SAFBC_WRITE16_SAF_PROT_WR_Pos         (0)                                            /**< (SAFBC_WRITE16 Position) This bit contains the permission for Write or Erase access by Protection Master 7 to this         Region.          x=Protection Master 7 may not Write or Erase in this region.         x=Protection Master 7 may Write and Erase in this region. */
#define SAFBC_WRITE16_SAF_PROT_WR_Msk         (0xFFU << SAFBC_WRITE16_SAF_PROT_WR_Pos)       /**< (SAFBC_WRITE16 Mask) SAF_PROT_WR */
#define SAFBC_WRITE16_SAF_PROT_WR(value)      (SAFBC_WRITE16_SAF_PROT_WR_Msk & ((value) << SAFBC_WRITE16_SAF_PROT_WR_Pos))

/* -------- SAFBC_READ16 : (SAFBC Offset: 0x190) (R/W 32) This is Read16 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. -------- */

typedef union
{
  struct
  {
    uint32_t SAF_PROT_RD0:1;            /**< bit:      0  This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. */
    uint32_t SAF_PROT_RD1:1;            /**< bit:      1  This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. */
    uint32_t SAF_PROT_RD2:1;            /**< bit:      2  This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. */
    uint32_t SAF_PROT_RD3:1;            /**< bit:      3  This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. */
    uint32_t SAF_PROT_RD4:1;            /**< bit:      4  This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. */
    uint32_t SAF_PROT_RD5:1;            /**< bit:      5  This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. */
    uint32_t SAF_PROT_RD6:1;            /**< bit:      6  This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. */
    uint32_t SAF_PROT_RD7:1;            /**< bit:      7  This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  struct
  {
    uint32_t SAF_PROT_RD:8;             /**< bit:   0..7  This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
    uint32_t :24;                       /**< bit:  8..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_READ16_bits_t;
#define SAFBC_READ16_RESETVALUE             (0x00U)                                       /**<  (SAFBC_READ16) This is Read16 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively.  Reset Value */

#define SAFBC_READ16_SAF_PROT_RD0_Pos         (0)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD0_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD0_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 0 to this Region.         It is a read-only placeholder because Protection Master 0 has full access to all Flash locations.         1=Protection Master 0 may always Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD1_Pos         (1)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD1_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD1_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 1 to this Region.         0=Protection Master 1 may not Read in this region.         1=Protection Master 1 may Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD2_Pos         (2)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD2_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD2_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 2 to this Region.         0=Protection Master 2 may not Read in this region.         1=Protection Master 2 may Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD3_Pos         (3)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD3_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD3_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 3 to this Region.         0=Protection Master 3 may not Read in this region.         1=Protection Master 3 may Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD4_Pos         (4)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD4_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD4_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 4 to this Region.         0=Protection Master 4 may not Read in this region.         1=Protection Master 4 may Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD5_Pos         (5)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD5_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD5_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 5 to this Region.         0=Protection Master 5 may not Read in this region.         1=Protection Master 5 may Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD6_Pos         (6)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD6_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD6_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 6 to this Region.         0=Protection Master 6 may not Read in this region.         1=Protection Master 6 may Read in this region. Mask */
#define SAFBC_READ16_SAF_PROT_RD7_Pos         (7)                                            /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Position */
#define SAFBC_READ16_SAF_PROT_RD7_Msk         (0x1U << SAFBC_READ16_SAF_PROT_RD7_Pos)        /**< (SAFBC_READ16) This bit contains the permission for Read access by Protection Master 7 to this Region.        0=Protection Master 7 may not Read in this region.        1=Protection Master 7 may Read in this region. Mask */
#define SAFBC_READ16_Msk                      (0x000000FFUL)                                 /**< (SAFBC_READ16) Register Mask  */
#define SAFBC_READ16_SAF_PROT_RD_Pos          (0)                                            /**< (SAFBC_READ16 Position) This bit contains the permission for Read access by Protection Master 7 to this Region.        x=Protection Master 7 may not Read in this region.        x=Protection Master 7 may Read in this region. */
#define SAFBC_READ16_SAF_PROT_RD_Msk          (0xFFU << SAFBC_READ16_SAF_PROT_RD_Pos)        /**< (SAFBC_READ16 Mask) SAF_PROT_RD */
#define SAFBC_READ16_SAF_PROT_RD(value)       (SAFBC_READ16_SAF_PROT_RD_Msk & ((value) << SAFBC_READ16_SAF_PROT_RD_Pos))

/* -------- SAFBC_POLL_TOUT : (SAFBC Offset: 0x194) (R/W 32) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash. -------- */

typedef union
{
  struct
  {
    uint32_t POLL_TIMEOUT:18;           /**< bit:  0..17  This field provides a polling timeout value in units of the 32KHz clock. Recommended         value is 5 seconds, expressed as 28000h (163,840 decimal) in this field. */
    uint32_t :14;                       /**< bit: 18..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_POLL_TOUT_bits_t;
#define SAFBC_POLL_TOUT_RESETVALUE          (0x00U)                                       /**<  (SAFBC_POLL_TOUT) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash.  Reset Value */

#define SAFBC_POLL_TOUT_POLL_TIMEOUT_Pos      (0)                                            /**< (SAFBC_POLL_TOUT) This field provides a polling timeout value in units of the 32KHz clock. Recommended         value is 5 seconds, expressed as 28000h (163,840 decimal) in this field. Position */
#define SAFBC_POLL_TOUT_POLL_TIMEOUT_Msk      (0x3FFFFU << SAFBC_POLL_TOUT_POLL_TIMEOUT_Pos)  /**< (SAFBC_POLL_TOUT) This field provides a polling timeout value in units of the 32KHz clock. Recommended         value is 5 seconds, expressed as 28000h (163,840 decimal) in this field. Mask */
#define SAFBC_POLL_TOUT_POLL_TIMEOUT(value)   (SAFBC_POLL_TOUT_POLL_TIMEOUT_Msk & ((value) << SAFBC_POLL_TOUT_POLL_TIMEOUT_Pos))
#define SAFBC_POLL_TOUT_Msk                   (0x0003FFFFUL)                                 /**< (SAFBC_POLL_TOUT) Register Mask  */

/* -------- SAFBC_POLL_INTERVAL : (SAFBC Offset: 0x198) (R/W 32) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic. -------- */

typedef union
{
  struct
  {
    uint32_t POLL_INTRVL:16;            /**< bit:  0..15  This field provides an interval in units of the EC internal clock MCLK. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_POLL_INTERVAL_bits_t;
#define SAFBC_POLL_INTERVAL_RESETVALUE      (0x00U)                                       /**<  (SAFBC_POLL_INTERVAL) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic.  Reset Value */

#define SAFBC_POLL_INTERVAL_POLL_INTRVL_Pos   (0)                                            /**< (SAFBC_POLL_INTERVAL) This field provides an interval in units of the EC internal clock MCLK. Position */
#define SAFBC_POLL_INTERVAL_POLL_INTRVL_Msk   (0xFFFFU << SAFBC_POLL_INTERVAL_POLL_INTRVL_Pos)  /**< (SAFBC_POLL_INTERVAL) This field provides an interval in units of the EC internal clock MCLK. Mask */
#define SAFBC_POLL_INTERVAL_POLL_INTRVL(value) (SAFBC_POLL_INTERVAL_POLL_INTRVL_Msk & ((value) << SAFBC_POLL_INTERVAL_POLL_INTRVL_Pos))
#define SAFBC_POLL_INTERVAL_Msk               (0x0000FFFFUL)                                 /**< (SAFBC_POLL_INTERVAL) Register Mask  */

/* -------- SAFBC_TIMEOUT_RESUSP : (SAFBC Offset: 0x19c) (R/W 32) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again. -------- */

typedef union
{
  struct
  {
    uint32_t SUS_RSM_INTERVAL:16;       /**< bit:  0..15  This field provides an interval value in units of the 32KHz RTC clock. Its value should         be taken from the Flash datasheet parameter that specifies minimum time for an Erase or         Program step to make progress. */
    uint32_t :16;                       /**< bit: 16..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_TIMEOUT_RESUSP_bits_t;
#define SAFBC_TIMEOUT_RESUSP_RESETVALUE     (0x01U)                                       /**<  (SAFBC_TIMEOUT_RESUSP) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again.  Reset Value */

#define SAFBC_TIMEOUT_RESUSP_SUS_RSM_INTERVAL_Pos (0)                                            /**< (SAFBC_TIMEOUT_RESUSP) This field provides an interval value in units of the 32KHz RTC clock. Its value should         be taken from the Flash datasheet parameter that specifies minimum time for an Erase or         Program step to make progress. Position */
#define SAFBC_TIMEOUT_RESUSP_SUS_RSM_INTERVAL_Msk (0xFFFFU << SAFBC_TIMEOUT_RESUSP_SUS_RSM_INTERVAL_Pos)  /**< (SAFBC_TIMEOUT_RESUSP) This field provides an interval value in units of the 32KHz RTC clock. Its value should         be taken from the Flash datasheet parameter that specifies minimum time for an Erase or         Program step to make progress. Mask */
#define SAFBC_TIMEOUT_RESUSP_SUS_RSM_INTERVAL(value) (SAFBC_TIMEOUT_RESUSP_SUS_RSM_INTERVAL_Msk & ((value) << SAFBC_TIMEOUT_RESUSP_SUS_RSM_INTERVAL_Pos))
#define SAFBC_TIMEOUT_RESUSP_Msk              (0x0000FFFFUL)                                 /**< (SAFBC_TIMEOUT_RESUSP) Register Mask  */

/* -------- SAFBC_TIMEOUT_RD_SUSP : (SAFBC Offset: 0x1a0) (R/W 32) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue. -------- */

typedef union
{
  struct
  {
    uint32_t READ_TIMEOUT:20;           /**< bit:  0..19  This field provides a timeout value in units of the EC internal clock MCLK. This value is         tunable for system performance, but a value at or below 20us is suggested. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_TIMEOUT_RD_SUSP_bits_t;
#define SAFBC_TIMEOUT_RD_SUSP_RESETVALUE    (0x00U)                                       /**<  (SAFBC_TIMEOUT_RD_SUSP) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue.  Reset Value */

#define SAFBC_TIMEOUT_RD_SUSP_READ_TIMEOUT_Pos (0)                                            /**< (SAFBC_TIMEOUT_RD_SUSP) This field provides a timeout value in units of the EC internal clock MCLK. This value is         tunable for system performance, but a value at or below 20us is suggested. Position */
#define SAFBC_TIMEOUT_RD_SUSP_READ_TIMEOUT_Msk (0xFFFFFU << SAFBC_TIMEOUT_RD_SUSP_READ_TIMEOUT_Pos)  /**< (SAFBC_TIMEOUT_RD_SUSP) This field provides a timeout value in units of the EC internal clock MCLK. This value is         tunable for system performance, but a value at or below 20us is suggested. Mask */
#define SAFBC_TIMEOUT_RD_SUSP_READ_TIMEOUT(value) (SAFBC_TIMEOUT_RD_SUSP_READ_TIMEOUT_Msk & ((value) << SAFBC_TIMEOUT_RD_SUSP_READ_TIMEOUT_Pos))
#define SAFBC_TIMEOUT_RD_SUSP_Msk             (0x000FFFFFUL)                                 /**< (SAFBC_TIMEOUT_RD_SUSP) Register Mask  */

/* -------- SAFBC_CS_POLL2_MSK : (SAFBC Offset: 0x1a4) (R/W 32) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state. -------- */

typedef union
{
  struct
  {
    uint32_t CS0_POLL2_MASK:16;         /**< bit:  0..15  A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS0 Flash. */
    uint32_t CS1_POLL2_MASK:16;         /**< bit: 16..31  A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS1 Flash. */
  };
  uint32_t w;
} __SAFBC_CS_POLL2_MSK_bits_t;
#define SAFBC_CS_POLL2_MSK_RESETVALUE       (0x00U)                                       /**<  (SAFBC_CS_POLL2_MSK) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state.  Reset Value */

#define SAFBC_CS_POLL2_MSK_CS0_POLL2_MASK_Pos (0)                                            /**< (SAFBC_CS_POLL2_MSK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS0 Flash. Position */
#define SAFBC_CS_POLL2_MSK_CS0_POLL2_MASK_Msk (0xFFFFU << SAFBC_CS_POLL2_MSK_CS0_POLL2_MASK_Pos)  /**< (SAFBC_CS_POLL2_MSK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS0 Flash. Mask */
#define SAFBC_CS_POLL2_MSK_CS0_POLL2_MASK(value) (SAFBC_CS_POLL2_MSK_CS0_POLL2_MASK_Msk & ((value) << SAFBC_CS_POLL2_MSK_CS0_POLL2_MASK_Pos))
#define SAFBC_CS_POLL2_MSK_CS1_POLL2_MASK_Pos (16)                                           /**< (SAFBC_CS_POLL2_MSK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS1 Flash. Position */
#define SAFBC_CS_POLL2_MSK_CS1_POLL2_MASK_Msk (0xFFFFU << SAFBC_CS_POLL2_MSK_CS1_POLL2_MASK_Pos)  /**< (SAFBC_CS_POLL2_MSK) A '1' in this field masks out (ignores) the corresponding bit returned in Poll-2 status         for the CS1 Flash. Mask */
#define SAFBC_CS_POLL2_MSK_CS1_POLL2_MASK(value) (SAFBC_CS_POLL2_MSK_CS1_POLL2_MASK_Msk & ((value) << SAFBC_CS_POLL2_MSK_CS1_POLL2_MASK_Pos))
#define SAFBC_CS_POLL2_MSK_Msk                (0xFFFFFFFFUL)                                 /**< (SAFBC_CS_POLL2_MSK) Register Mask  */

/* -------- SAFBC_TESTREG_CTRL0 : (SAFBC Offset: 0x1a8) (R/W 32) This register provides special mode control. -------- */

typedef union
{
  struct
  {
    uint32_t DISABLE_SUSPEND:1;         /**< bit:      0  A '1' in this field enters DISABLE_SUSPEND mode, which prevents suspending an Erase or         Write in progress. In this mode, Read operations will be held waiting until the Erase or         Write finishes. */
    uint32_t :31;                       /**< bit:  1..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_TESTREG_CTRL0_bits_t;
#define SAFBC_TESTREG_CTRL0_RESETVALUE      (0x00U)                                       /**<  (SAFBC_TESTREG_CTRL0) This register provides special mode control.  Reset Value */

#define SAFBC_TESTREG_CTRL0_DISABLE_SUSPEND_Pos (0)                                            /**< (SAFBC_TESTREG_CTRL0) A '1' in this field enters DISABLE_SUSPEND mode, which prevents suspending an Erase or         Write in progress. In this mode, Read operations will be held waiting until the Erase or         Write finishes. Position */
#define SAFBC_TESTREG_CTRL0_DISABLE_SUSPEND_Msk (0x1U << SAFBC_TESTREG_CTRL0_DISABLE_SUSPEND_Pos)  /**< (SAFBC_TESTREG_CTRL0) A '1' in this field enters DISABLE_SUSPEND mode, which prevents suspending an Erase or         Write in progress. In this mode, Read operations will be held waiting until the Erase or         Write finishes. Mask */
#define SAFBC_TESTREG_CTRL0_Msk               (0x00000001UL)                                 /**< (SAFBC_TESTREG_CTRL0) Register Mask  */

/* -------- SAFBC_TIMOUTDLY_SUSPCHK : (SAFBC Offset: 0x1ac) (R/W 32) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash. -------- */

typedef union
{
  struct
  {
    uint32_t SUS_CHECK_DELAY:20;        /**< bit:  0..19  This field provides a delay value in units of the EC internal clock MCLK. This value         should be set to 20us. */
    uint32_t :12;                       /**< bit: 20..31  Reserved                                      */
  };
  uint32_t w;
} __SAFBC_TIMOUTDLY_SUSPCHK_bits_t;
#define SAFBC_TIMOUTDLY_SUSPCHK_RESETVALUE  (0x00U)                                       /**<  (SAFBC_TIMOUTDLY_SUSPCHK) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash.  Reset Value */

#define SAFBC_TIMOUTDLY_SUSPCHK_SUS_CHECK_DELAY_Pos (0)                                            /**< (SAFBC_TIMOUTDLY_SUSPCHK) This field provides a delay value in units of the EC internal clock MCLK. This value         should be set to 20us. Position */
#define SAFBC_TIMOUTDLY_SUSPCHK_SUS_CHECK_DELAY_Msk (0xFFFFFU << SAFBC_TIMOUTDLY_SUSPCHK_SUS_CHECK_DELAY_Pos)  /**< (SAFBC_TIMOUTDLY_SUSPCHK) This field provides a delay value in units of the EC internal clock MCLK. This value         should be set to 20us. Mask */
#define SAFBC_TIMOUTDLY_SUSPCHK_SUS_CHECK_DELAY(value) (SAFBC_TIMOUTDLY_SUSPCHK_SUS_CHECK_DELAY_Msk & ((value) << SAFBC_TIMOUTDLY_SUSPCHK_SUS_CHECK_DELAY_Pos))
#define SAFBC_TIMOUTDLY_SUSPCHK_Msk           (0x000FFFFFUL)                                 /**< (SAFBC_TIMOUTDLY_SUSPCHK) Register Mask  */

/* -------- SAFBC_TESTREG_CTRL1 : (SAFBC Offset: 0x1b0) (R/W 32) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully. -------- */

typedef union
{
  struct
  {
    uint32_t CS0_PREFIX_OP:8;           /**< bit:   0..7  This field is the Prefix Opcode for Micron XIP mode on CS0. It should be set to 81h,         for Micron parts. */
    uint32_t CS0_PREFIX_DAT:8;          /**< bit:  8..15  This field is the data sent with the CS0_PREFIX_OP command. */
    uint32_t CS1_PREFIX_OP:8;           /**< bit: 16..23  This field is the Prefix Opcode for Micron XIP mode on CS1. It should be set to 81h,         for Micron parts. */
    uint32_t CS1_PREFIX_DAT:8;          /**< bit: 24..31  This field is the data sent with the CS1_PREFIX_OP command. */
  };
  uint32_t w;
} __SAFBC_TESTREG_CTRL1_bits_t;
#define SAFBC_TESTREG_CTRL1_RESETVALUE      (0x00U)                                       /**<  (SAFBC_TESTREG_CTRL1) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully.  Reset Value */

#define SAFBC_TESTREG_CTRL1_CS0_PREFIX_OP_Pos (0)                                            /**< (SAFBC_TESTREG_CTRL1) This field is the Prefix Opcode for Micron XIP mode on CS0. It should be set to 81h,         for Micron parts. Position */
#define SAFBC_TESTREG_CTRL1_CS0_PREFIX_OP_Msk (0xFFU << SAFBC_TESTREG_CTRL1_CS0_PREFIX_OP_Pos)  /**< (SAFBC_TESTREG_CTRL1) This field is the Prefix Opcode for Micron XIP mode on CS0. It should be set to 81h,         for Micron parts. Mask */
#define SAFBC_TESTREG_CTRL1_CS0_PREFIX_OP(value) (SAFBC_TESTREG_CTRL1_CS0_PREFIX_OP_Msk & ((value) << SAFBC_TESTREG_CTRL1_CS0_PREFIX_OP_Pos))
#define SAFBC_TESTREG_CTRL1_CS0_PREFIX_DAT_Pos (8)                                            /**< (SAFBC_TESTREG_CTRL1) This field is the data sent with the CS0_PREFIX_OP command. Position */
#define SAFBC_TESTREG_CTRL1_CS0_PREFIX_DAT_Msk (0xFFU << SAFBC_TESTREG_CTRL1_CS0_PREFIX_DAT_Pos)  /**< (SAFBC_TESTREG_CTRL1) This field is the data sent with the CS0_PREFIX_OP command. Mask */
#define SAFBC_TESTREG_CTRL1_CS0_PREFIX_DAT(value) (SAFBC_TESTREG_CTRL1_CS0_PREFIX_DAT_Msk & ((value) << SAFBC_TESTREG_CTRL1_CS0_PREFIX_DAT_Pos))
#define SAFBC_TESTREG_CTRL1_CS1_PREFIX_OP_Pos (16)                                           /**< (SAFBC_TESTREG_CTRL1) This field is the Prefix Opcode for Micron XIP mode on CS1. It should be set to 81h,         for Micron parts. Position */
#define SAFBC_TESTREG_CTRL1_CS1_PREFIX_OP_Msk (0xFFU << SAFBC_TESTREG_CTRL1_CS1_PREFIX_OP_Pos)  /**< (SAFBC_TESTREG_CTRL1) This field is the Prefix Opcode for Micron XIP mode on CS1. It should be set to 81h,         for Micron parts. Mask */
#define SAFBC_TESTREG_CTRL1_CS1_PREFIX_OP(value) (SAFBC_TESTREG_CTRL1_CS1_PREFIX_OP_Msk & ((value) << SAFBC_TESTREG_CTRL1_CS1_PREFIX_OP_Pos))
#define SAFBC_TESTREG_CTRL1_CS1_PREFIX_DAT_Pos (24)                                           /**< (SAFBC_TESTREG_CTRL1) This field is the data sent with the CS1_PREFIX_OP command. Position */
#define SAFBC_TESTREG_CTRL1_CS1_PREFIX_DAT_Msk (0xFFU << SAFBC_TESTREG_CTRL1_CS1_PREFIX_DAT_Pos)  /**< (SAFBC_TESTREG_CTRL1) This field is the data sent with the CS1_PREFIX_OP command. Mask */
#define SAFBC_TESTREG_CTRL1_CS1_PREFIX_DAT(value) (SAFBC_TESTREG_CTRL1_CS1_PREFIX_DAT_Msk & ((value) << SAFBC_TESTREG_CTRL1_CS1_PREFIX_DAT_Pos))
#define SAFBC_TESTREG_CTRL1_Msk               (0xFFFFFFFFUL)                                 /**< (SAFBC_TESTREG_CTRL1) Register Mask  */

/** \brief SAFBC register offsets definitions */
#define SAFBC_EC_LEN_TAG_CMD_OFFSET  (0x18)         /**< (SAFBC_EC_LEN_TAG_CMD) This register defines the command type and length of transfers requested by EC firmware Offset */
#define SAFBC_EC_FLASH_ADD_OFFSET    (0x1C)         /**< (SAFBC_EC_FLASH_ADD) This register hold the Flash Space address to be accessed by the current command from EC firmware. Offset */
#define SAFBC_EC_START_OFFSET        (0x20)         /**< (SAFBC_EC_START) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer. Offset */
#define SAFBC_EC_AHB_ADD_OFFSET      (0x24)         /**< (SAFBC_EC_AHB_ADD) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access. Offset */
#define SAFBC_EC_DONE_STATUS_OFFSET  (0x28)         /**< (SAFBC_EC_DONE_STATUS) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request. Offset */
#define SAFBC_EC_EN_OFFSET           (0x2C)         /**< (SAFBC_EC_EN) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt. Offset */
#define SAFBC_CONFIG_SIZE_OFFSET     (0x30)         /**< (SAFBC_CONFIG_SIZE) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. Offset */
#define SAFBC_CONFIG_TH_OFFSET       (0x34)         /**< (SAFBC_CONFIG_TH) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices. Offset */
#define SAFBC_CONFIG_MISC_OFFSET     (0x38)         /**< (SAFBC_CONFIG_MISC) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access. Offset */
#define SAFBC_ESPI_ERRINTR_STAT_OFFSET (0x3C)         /**< (SAFBC_ESPI_ERRINTR_STAT) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register. Offset */
#define SAFBC_ESPI_ERRINT_EN_OFFSET  (0x40)         /**< (SAFBC_ESPI_ERRINT_EN) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware. Offset */
#define SAFBC_EC_BUSY_REG_OFFSET     (0x44)         /**< (SAFBC_EC_BUSY_REG) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access. Offset */
#define SAFBC_CNFG_CS0_OPCODEA_OFFSET (0x4C)         /**< (SAFBC_CNFG_CS0_OPCODEA) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0. Offset */
#define SAFBC_CNFG_CS0_OPCODEB_OFFSET (0x50)         /**< (SAFBC_CNFG_CS0_OPCODEB) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it. Offset */
#define SAFBC_CNFG_CS0_OPCODEC_OFFSET (0x54)         /**< (SAFBC_CNFG_CS0_OPCODEC) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device. Offset */
#define SAFBC_CNFG_CS0_DESC_OFFSET   (0x58)         /**< (SAFBC_CNFG_CS0_DESC) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 Offset */
#define SAFBC_CNFG_CS1_OPCODEA_OFFSET (0x5C)         /**< (SAFBC_CNFG_CS1_OPCODEA) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0. Offset */
#define SAFBC_CNFG_CS1_OPCODEB_OFFSET (0x60)         /**< (SAFBC_CNFG_CS1_OPCODEB) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it. Offset */
#define SAFBC_CNFG_CS1_OPCODEC_OFFSET (0x64)         /**< (SAFBC_CNFG_CS1_OPCODEC) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device. Offset */
#define SAFBC_CNFG_CS1_DESC_OFFSET   (0x68)         /**< (SAFBC_CNFG_CS1_DESC) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 Offset */
#define SAFBC_CNFG_CS_DESC_OFFSET    (0x6C)         /**< (SAFBC_CNFG_CS_DESC) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge. Offset */
#define SAFBC_PROTECT_LOCK_OFFSET    (0x70)         /**< (SAFBC_PROTECT_LOCK) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'. Offset */
#define SAFBC_PROTECT_DIRTY_OFFSET   (0x74)         /**< (SAFBC_PROTECT_DIRTY) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register. Offset */
#define SAFBC_TAGMAP0_OFFSET         (0x78)         /**< (SAFBC_TAGMAP0) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen. Offset */
#define SAFBC_TAGMAP1_OFFSET         (0x7C)         /**< (SAFBC_TAGMAP1) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen. Offset */
#define SAFBC_TAGMAP2_OFFSET         (0x80)         /**< (SAFBC_TAGMAP2) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later. Offset */
#define SAFBC_START00_OFFSET         (0x84)         /**< (SAFBC_START00) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT00_OFFSET         (0x88)         /**< (SAFBC_LIMIT00) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE00_OFFSET         (0x8C)         /**< (SAFBC_WRITE00) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ00_OFFSET          (0x90)         /**< (SAFBC_READ00) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START01_OFFSET         (0x94)         /**< (SAFBC_START01) This is Start01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT01_OFFSET         (0x98)         /**< (SAFBC_LIMIT01) This is Limit01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE01_OFFSET         (0x9C)         /**< (SAFBC_WRITE01) This is Write01 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ01_OFFSET          (0xA0)         /**< (SAFBC_READ01) This is Read01 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START02_OFFSET         (0xA4)         /**< (SAFBC_START02) This is Start02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT02_OFFSET         (0xA8)         /**< (SAFBC_LIMIT02) This is Limit02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE02_OFFSET         (0xAC)         /**< (SAFBC_WRITE02) This is Write02 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ02_OFFSET          (0xB0)         /**< (SAFBC_READ02) This is Read02 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START03_OFFSET         (0xB4)         /**< (SAFBC_START03) This is Start03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT03_OFFSET         (0xB8)         /**< (SAFBC_LIMIT03) This is Limit03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE03_OFFSET         (0xBC)         /**< (SAFBC_WRITE03) This is Write03 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ03_OFFSET          (0xC0)         /**< (SAFBC_READ03) This is Read03 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START04_OFFSET         (0xC4)         /**< (SAFBC_START04) This is Start04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT04_OFFSET         (0xC8)         /**< (SAFBC_LIMIT04) This is Limit04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE04_OFFSET         (0xCC)         /**< (SAFBC_WRITE04) This is Write04 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ04_OFFSET          (0xD0)         /**< (SAFBC_READ04) This is Read04 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START05_OFFSET         (0xD4)         /**< (SAFBC_START05) This is Start05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT05_OFFSET         (0xD8)         /**< (SAFBC_LIMIT05) This is Limit05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE05_OFFSET         (0xDC)         /**< (SAFBC_WRITE05) This is Write05 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ05_OFFSET          (0xE0)         /**< (SAFBC_READ05) This is Read05 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START06_OFFSET         (0xE4)         /**< (SAFBC_START06) This is Start06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT06_OFFSET         (0xE8)         /**< (SAFBC_LIMIT06) This is Limit06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE06_OFFSET         (0xEC)         /**< (SAFBC_WRITE06) This is Write06 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ06_OFFSET          (0xF0)         /**< (SAFBC_READ06) This is Read06 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START07_OFFSET         (0xF4)         /**< (SAFBC_START07) This is Start07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT07_OFFSET         (0xF8)         /**< (SAFBC_LIMIT07) This is Limit07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE07_OFFSET         (0xFC)         /**< (SAFBC_WRITE07) This is Write07 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ07_OFFSET          (0x100)        /**< (SAFBC_READ07) This is Read07 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START08_OFFSET         (0x104)        /**< (SAFBC_START08) This is Start08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT08_OFFSET         (0x108)        /**< (SAFBC_LIMIT08) This is Limit08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE08_OFFSET         (0x10C)        /**< (SAFBC_WRITE08) This is Write08 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ08_OFFSET          (0x110)        /**< (SAFBC_READ08) This is Read08 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START09_OFFSET         (0x114)        /**< (SAFBC_START09) This is Start09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT09_OFFSET         (0x118)        /**< (SAFBC_LIMIT09) This is Limit09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE09_OFFSET         (0x11C)        /**< (SAFBC_WRITE09) This is Write09 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ09_OFFSET          (0x120)        /**< (SAFBC_READ09) This is Read09 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START10_OFFSET         (0x124)        /**< (SAFBC_START10) This is Start10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT10_OFFSET         (0x128)        /**< (SAFBC_LIMIT10) This is Limit10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE10_OFFSET         (0x12C)        /**< (SAFBC_WRITE10) This is Write10 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ10_OFFSET          (0x130)        /**< (SAFBC_READ10) This is Read10 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START11_OFFSET         (0x134)        /**< (SAFBC_START11) This is Start11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT11_OFFSET         (0x138)        /**< (SAFBC_LIMIT11) This is Limit11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE11_OFFSET         (0x13C)        /**< (SAFBC_WRITE11) This is Write11 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ11_OFFSET          (0x140)        /**< (SAFBC_READ11) This is Read11 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START12_OFFSET         (0x144)        /**< (SAFBC_START12) This is Start12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT12_OFFSET         (0x148)        /**< (SAFBC_LIMIT12) This is Limit12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE12_OFFSET         (0x14C)        /**< (SAFBC_WRITE12) This is Write12 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ12_OFFSET          (0x150)        /**< (SAFBC_READ12) This is Read12 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START13_OFFSET         (0x154)        /**< (SAFBC_START13) This is Start13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT13_OFFSET         (0x158)        /**< (SAFBC_LIMIT13) This is Limit13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE13_OFFSET         (0x15C)        /**< (SAFBC_WRITE13) This is Write13 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ13_OFFSET          (0x160)        /**< (SAFBC_READ13) This is Read13 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START14_OFFSET         (0x164)        /**< (SAFBC_START14) This is Start14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT14_OFFSET         (0x168)        /**< (SAFBC_LIMIT14) This is Limit14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE14_OFFSET         (0x16C)        /**< (SAFBC_WRITE14) This is Write14 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ14_OFFSET          (0x170)        /**< (SAFBC_READ14) This is Read14 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START15_OFFSET         (0x174)        /**< (SAFBC_START15) This is Start15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT15_OFFSET         (0x178)        /**< (SAFBC_LIMIT15) This is Limit15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE15_OFFSET         (0x17C)        /**< (SAFBC_WRITE15) This is Write15 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ15_OFFSET          (0x180)        /**< (SAFBC_READ15) This is Read15 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_START16_OFFSET         (0x184)        /**< (SAFBC_START16) This is Start16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_LIMIT16_OFFSET         (0x188)        /**< (SAFBC_LIMIT16) This is Limit16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). Offset */
#define SAFBC_WRITE16_OFFSET         (0x18C)        /**< (SAFBC_WRITE16) This is Write16 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. Offset */
#define SAFBC_READ16_OFFSET          (0x190)        /**< (SAFBC_READ16) This is Read16 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. Offset */
#define SAFBC_POLL_TOUT_OFFSET       (0x194)        /**< (SAFBC_POLL_TOUT) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash. Offset */
#define SAFBC_POLL_INTERVAL_OFFSET   (0x198)        /**< (SAFBC_POLL_INTERVAL) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic. Offset */
#define SAFBC_TIMEOUT_RESUSP_OFFSET  (0x19C)        /**< (SAFBC_TIMEOUT_RESUSP) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again. Offset */
#define SAFBC_TIMEOUT_RD_SUSP_OFFSET (0x1A0)        /**< (SAFBC_TIMEOUT_RD_SUSP) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue. Offset */
#define SAFBC_CS_POLL2_MSK_OFFSET    (0x1A4)        /**< (SAFBC_CS_POLL2_MSK) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state. Offset */
#define SAFBC_TESTREG_CTRL0_OFFSET   (0x1A8)        /**< (SAFBC_TESTREG_CTRL0) This register provides special mode control. Offset */
#define SAFBC_TIMOUTDLY_SUSPCHK_OFFSET (0x1AC)        /**< (SAFBC_TIMOUTDLY_SUSPCHK) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash. Offset */
#define SAFBC_TESTREG_CTRL1_OFFSET   (0x1B0)        /**< (SAFBC_TESTREG_CTRL1) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully. Offset */

/** \brief SAFBC register API structure */
typedef struct
{  /* SAF BRIDGE COMPONENT */
  __IO  __SAFBC_EC_LEN_TAG_CMD_bits_t  EC_LEN_TAG_CMD; /**< Offset: 0x18 (R/W  32) This register defines the command type and length of transfers requested by EC firmware */
  __IO  __SAFBC_EC_FLASH_ADD_bits_t    EC_FLASH_ADD;  /**< Offset: 0x1C (R/W  32) This register hold the Flash Space address to be accessed by the current command from EC firmware. */
  __IO  __SAFBC_EC_START_bits_t        EC_START;      /**< Offset: 0x20 (R/W  32) This register contains the Start control for a Flash access requested in the rest of the EC    Portal registers. It triggers the requested transfer. */
  __IO  __SAFBC_EC_AHB_ADD_bits_t      EC_AHB_ADD;    /**< Offset: 0x24 (R/W  32) This register holds a location in the EC's own address space that is to be used as     the SRAM buffer for an EC Flash access. */
  __IO  __SAFBC_EC_DONE_STATUS_bits_t  EC_DONE_STATUS; /**< Offset: 0x28 (R/W  32) This register holds the DONE status bit, which indicates when a request is completed     by rising to '1'. It may be used as an interrupt trigger for INTR_FLASH. It may be cleared     at any time after it rises, but must be cleared before issuing the next request. */
  __IO  __SAFBC_EC_EN_bits_t           EC_EN;         /**< Offset: 0x2C (R/W  32) This register contains the one bit DONE_EN in bit position[0]. This bit enables the DONE bit in     the status register to trigger an interrupt. */
  __IO  __SAFBC_CONFIG_SIZE_bits_t     CONFIG_SIZE;   /**< Offset: 0x30 (R/W  32) This register declares the address of the final byte of the Flash space implemented in the    physically present Flash device or devices. */
  __IO  __SAFBC_CONFIG_TH_bits_t       CONFIG_TH;     /**< Offset: 0x34 (R/W  32) This register declares whether there are two Flash devices, and if so, where the boundary is     between the devices. */
  __IO  __SAFBC_CONFIG_MISC_bits_t     CONFIG_MISC;   /**< Offset: 0x38 (R/W  32) Bits[7:6] (PREFIX) declare the need for some Flash devices (notably Micron) to be given an     explicit command to enter Continuous Mode, as opposed to requiring only Mode bits in the first     Read access. */
  __IO  __SAFBC_ESPI_ERRINTR_STAT_bits_t ESPI_ERRINTR_STAT; /**< Offset: 0x3C (R/W  32) These bits may be individually enabled to trigger interrupts using the corresponding        Interrupt Enable register. */
  __IO  __SAFBC_ESPI_ERRINT_EN_bits_t  ESPI_ERRINT_EN; /**< Offset: 0x40 (R/W  32) These bits individually enable the bits in SAF eSPI Monitor Status Register  to trigger    interrupts to the EC firmware. */
  __IO  __SAFBC_EC_BUSY_REG_bits_t     EC_BUSY_REG;   /**< Offset: 0x44 (R/W  32) This register holds the EC_BUSY status bit, which indicates when the EC Portal    is busy performing an access. */
  __IO  __SAFBC_CNFG_CS0_OPCODEA_bits_t CNFG_CS0_OPCODEA; /**< Offset: 0x4C (R/W  32) There are two Opcode A registers, one associated with each of the Flashes. If the CS1     Flash does not exist, its register can be left in its default state. The four fields in each     register represent the 8-bit Flash opcodes for Write Enable, Suspend, Resume and Read Status     Register. The Status Register referred to is the register inside the Flash which contains the     (BUSY) or (IN PROGRESS) status bit in position 0. */
  __IO  __SAFBC_CNFG_CS0_OPCODEB_bits_t CNFG_CS0_OPCODEB; /**< Offset: 0x50 (R/W  32) There are two Opcode B registers, one associated with each of the Flashes. If the CS1 Flash    does not exist, its register can be left in its default state. The OP_PROGRAM field is mandatory,    and must hold the Page Program opcode for the respective Flash. The Erase size of 4K is mandatory,    and so the OP_ERASE0 field must be initialized to the appropriate opcode for the Flash device.    There is only one bit declaring each Erase size up to the Host System (instead of one per Flash device,    see eSPI Configuration Register 44h), so if there are two Flash devices, each    Erase size over 4K must be declared here only if BOTH Flash devices support it. */
  __IO  __SAFBC_CNFG_CS0_OPCODEC_bits_t CNFG_CS0_OPCODEC; /**< Offset: 0x54 (R/W  32) There are two Opcode C registers, one associated with each of the Flashes. If the CS1 Flash     does not exist, its register can be left in its default state. Two fields (OP) define opcodes,     and two fields (MODE) represent the Mode code values. Mode codes are provided immediately after     the Address in Continuous Read traffic, and are used to keep the Flash device in Continuous     Read Mode. Depending on the Flash device manufacturer, this mode may be documented in their     datasheet as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy     clock. The recommended Mode values given below are selected to be appropriate for any Flash device. */
  __IO  __SAFBC_CNFG_CS0_DESC_bits_t   CNFG_CS0_DESC; /**< Offset: 0x58 (R/W  32) There are two Per-Flash Descriptors registers, one associated with each of the Flash devices.     If the CS1 Flash does not exist, its register can be left in its default state. Each 4-bit field     is a pointer which identifies a Timing Descriptor location in the Captive QMSPI block's Timing     Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 */
  __IO  __SAFBC_CNFG_CS1_OPCODEA_bits_t CNFG_CS1_OPCODEA; /**< Offset: 0x5C (R/W  32) This is the CS1 Opcode A register. \n   If the CS1 Flash does not exist, its register can be left in its default state. The four fields in each register represent the 8-bit Flash\n   opcodes for Write Enable, Suspend, Resume and Read Status Register. The Status Register referred to is the register inside the Flash which\n          contains the BUSY or IN PROGRESS status bit in position 0. */
  __IO  __SAFBC_CNFG_CS1_OPCODEB_bits_t CNFG_CS1_OPCODEB; /**< Offset: 0x60 (R/W  32) This is the CS1 Flash Opcode B register. If the CS1 Flash does not exist, its register can be     left in its default state. The OP_PROGRAM field is mandatory, and must hold the Page Program     opcode for the respective Flash. The Erase size of 4K is mandatory, and so the OP_ERASE0 field     must be initialized to the appropriate opcode for the Flash device. There is only one bit     declaring each Erase size up to the Host System (instead of one per Flash device, see eSPI     Configuration Register 44h), so if there are two Flash devices, each Erase size over 4K must     be declared here only if BOTH Flash devices support it. */
  __IO  __SAFBC_CNFG_CS1_OPCODEC_bits_t CNFG_CS1_OPCODEC; /**< Offset: 0x64 (R/W  32) This is the CS1 Flash device Opcode C register. If the CS1 Flash does not exist, its     register can be left in its default state. Two fields (OP) define opcodes, and two fields     (MODE) represent the Mode code values. Mode codes are provided immediately after the Address     in Continuous Read traffic, and are used to keep the Flash device in Continuous Read Mode.     Depending on the Flash device manufacturer, this mode may be documented in their datasheet     as either a Mode byte, or as certain bits of a first Dummy byte or first Dummy clock.     The recommended Mode values given below are selected to be appropriate for any Flash device. */
  __IO  __SAFBC_CNFG_CS1_DESC_bits_t   CNFG_CS1_DESC; /**< Offset: 0x68 (R/W  32) This is the Per-Flash Descriptors register for CS1 Flash . If the CS1 Flash does not exist,     its register can be left in its default state. Each 4-bit field is a pointer which identifies a     Timing Descriptor location in the Captive QMSPI block's Timing Description register structure.     The ENTER_CONT (Enter Continuous Mode) and READ_CONT (Read in Continuous Mode) fields are used to     invoke a QMSPI Timing Descriptor chain for the corresponding action, by identifying the first     Descriptor entry of the chain being invoked. Using the general QMSPI programming model, these     settings would be:      ENTER_CONT =      - 3 for CS0      - 9 for CS1      READ_CONT =      - 0 for CS0      - 6 for CS1      The SIZE_CONT field identifies the specific Descriptor within the READ_CONT chain that holds the      requested Read size. Using the example QMSPI programming model, these settings would be:       SIZE_CONT =       - 2 for CS0       - 8 for CS1 */
  __IO  __SAFBC_CNFG_CS_DESC_bits_t    CNFG_CS_DESC;  /**< Offset: 0x6C (R/W  32) This is a single register, which accompanies the two Per-Flash Descriptors registers, and     provides Descriptor pointers that are shared by both CS0 and CS1 devices uniformly.     Each 4-bit field is a pointer which identifies a Timing Descriptor location in the Captive     QMSPI block's memory. The EXIT_CONT field (Exit Continuous Mode) points to the single chain     invoked to exit the Flash from Continuous Mode, allowing an Erase or Program command to be     entered. This chain is identical for either Flash device, regardless of its manufacturer, and     simply directs a universal Exit symbol to the appropriate CS0/CS1 device. The POLL1 and POLL2     fields should both point to the same chain. This chain will issue the appropriate opcode for the     operation (Poll1 or Poll2) supplied by the SAF Bridge from the Opcode registers, and will read     back 16 bits of information for use by the SAF Bridge. */
  __IO  __SAFBC_PROTECT_LOCK_bits_t    PROTECT_LOCK;  /**< Offset: 0x70 (R/W  32) There is a bit in this register for each of the 17 Protection Region Register sets. Writing     '1' to a bit locks the associated 4-Register set to Read-Only access, and also locks this bit     itself to a Read-Only '1'. */
  __IO  __SAFBC_PROTECT_DIRTY_bits_t   PROTECT_DIRTY; /**< Offset: 0x74 (R/W  32) There is a bit in this register for each of the 12 Flash Regions that can be allocated from     the Region Table in the Intel Descriptor structure. Register sets 12 through 16 do not represent     allocated Flash regions, and so they do not have bits in this register. */
  __IO  __SAFBC_TAGMAP0_bits_t         TAGMAP0;       /**< Offset: 0x78 (R/W  32) The default values in this register match hard-wired assignments made in the Chipset for eSPI     Tag values 0h through 7h. A default value of 7 indicates a non-existent map entry, for a Tag value     which should never happen. */
  __IO  __SAFBC_TAGMAP1_bits_t         TAGMAP1;       /**< Offset: 0x7C (R/W  32) The default values in this register match hard-wired assignments made in the Chipset for eSPI Tag     values 8h through Fh. A default value of 7 indicates a non-existent map entry, for a Tag value which     should never happen. */
  __IO  __SAFBC_TAGMAP2_bits_t         TAGMAP2;       /**< Offset: 0x80 (R/W  32) The default value in bits [2:0] of this register matches the hard-wired assignment made in the     Chipset for accesses made by an EC. After ensuring that all three Tag Map Registers [2:0] contain     valid mappings, the STM_LK bit should be set to '1' to lock them, preventing firmware from     re-assigning them later. */
  __IO  __SAFBC_START00_bits_t         START00;       /**< Offset: 0x84 (R/W  32) This is Start00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT00_bits_t         LIMIT00;       /**< Offset: 0x88 (R/W  32) This is Limit00 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE00_bits_t         WRITE00;       /**< Offset: 0x8C (R/W  32) This is Write00 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ00_bits_t          READ00;        /**< Offset: 0x90 (R/W  32) This is Read00 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START01_bits_t         START01;       /**< Offset: 0x94 (R/W  32) This is Start01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT01_bits_t         LIMIT01;       /**< Offset: 0x98 (R/W  32) This is Limit01 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE01_bits_t         WRITE01;       /**< Offset: 0x9C (R/W  32) This is Write01 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ01_bits_t          READ01;        /**< Offset: 0xA0 (R/W  32) This is Read01 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START02_bits_t         START02;       /**< Offset: 0xA4 (R/W  32) This is Start02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT02_bits_t         LIMIT02;       /**< Offset: 0xA8 (R/W  32) This is Limit02 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE02_bits_t         WRITE02;       /**< Offset: 0xAC (R/W  32) This is Write02 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ02_bits_t          READ02;        /**< Offset: 0xB0 (R/W  32) This is Read02 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START03_bits_t         START03;       /**< Offset: 0xB4 (R/W  32) This is Start03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT03_bits_t         LIMIT03;       /**< Offset: 0xB8 (R/W  32) This is Limit03 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE03_bits_t         WRITE03;       /**< Offset: 0xBC (R/W  32) This is Write03 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ03_bits_t          READ03;        /**< Offset: 0xC0 (R/W  32) This is Read03 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START04_bits_t         START04;       /**< Offset: 0xC4 (R/W  32) This is Start04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT04_bits_t         LIMIT04;       /**< Offset: 0xC8 (R/W  32) This is Limit04 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE04_bits_t         WRITE04;       /**< Offset: 0xCC (R/W  32) This is Write04 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ04_bits_t          READ04;        /**< Offset: 0xD0 (R/W  32) This is Read04 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START05_bits_t         START05;       /**< Offset: 0xD4 (R/W  32) This is Start05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT05_bits_t         LIMIT05;       /**< Offset: 0xD8 (R/W  32) This is Limit05 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE05_bits_t         WRITE05;       /**< Offset: 0xDC (R/W  32) This is Write05 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ05_bits_t          READ05;        /**< Offset: 0xE0 (R/W  32) This is Read05 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START06_bits_t         START06;       /**< Offset: 0xE4 (R/W  32) This is Start06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT06_bits_t         LIMIT06;       /**< Offset: 0xE8 (R/W  32) This is Limit06 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE06_bits_t         WRITE06;       /**< Offset: 0xEC (R/W  32) This is Write06 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ06_bits_t          READ06;        /**< Offset: 0xF0 (R/W  32) This is Read06 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START07_bits_t         START07;       /**< Offset: 0xF4 (R/W  32) This is Start07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT07_bits_t         LIMIT07;       /**< Offset: 0xF8 (R/W  32) This is Limit07 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE07_bits_t         WRITE07;       /**< Offset: 0xFC (R/W  32) This is Write07 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ07_bits_t          READ07;        /**< Offset: 0x100 (R/W  32) This is Read07 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START08_bits_t         START08;       /**< Offset: 0x104 (R/W  32) This is Start08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT08_bits_t         LIMIT08;       /**< Offset: 0x108 (R/W  32) This is Limit08 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE08_bits_t         WRITE08;       /**< Offset: 0x10C (R/W  32) This is Write08 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ08_bits_t          READ08;        /**< Offset: 0x110 (R/W  32) This is Read08 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START09_bits_t         START09;       /**< Offset: 0x114 (R/W  32) This is Start09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT09_bits_t         LIMIT09;       /**< Offset: 0x118 (R/W  32) This is Limit09 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE09_bits_t         WRITE09;       /**< Offset: 0x11C (R/W  32) This is Write09 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ09_bits_t          READ09;        /**< Offset: 0x120 (R/W  32) This is Read09 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START10_bits_t         START10;       /**< Offset: 0x124 (R/W  32) This is Start10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT10_bits_t         LIMIT10;       /**< Offset: 0x128 (R/W  32) This is Limit10 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE10_bits_t         WRITE10;       /**< Offset: 0x12C (R/W  32) This is Write10 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ10_bits_t          READ10;        /**< Offset: 0x130 (R/W  32) This is Read10 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START11_bits_t         START11;       /**< Offset: 0x134 (R/W  32) This is Start11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT11_bits_t         LIMIT11;       /**< Offset: 0x138 (R/W  32) This is Limit11 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE11_bits_t         WRITE11;       /**< Offset: 0x13C (R/W  32) This is Write11 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ11_bits_t          READ11;        /**< Offset: 0x140 (R/W  32) This is Read11 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START12_bits_t         START12;       /**< Offset: 0x144 (R/W  32) This is Start12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT12_bits_t         LIMIT12;       /**< Offset: 0x148 (R/W  32) This is Limit12 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE12_bits_t         WRITE12;       /**< Offset: 0x14C (R/W  32) This is Write12 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ12_bits_t          READ12;        /**< Offset: 0x150 (R/W  32) This is Read12 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START13_bits_t         START13;       /**< Offset: 0x154 (R/W  32) This is Start13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT13_bits_t         LIMIT13;       /**< Offset: 0x158 (R/W  32) This is Limit13 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE13_bits_t         WRITE13;       /**< Offset: 0x15C (R/W  32) This is Write13 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ13_bits_t          READ13;        /**< Offset: 0x160 (R/W  32) This is Read13 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START14_bits_t         START14;       /**< Offset: 0x164 (R/W  32) This is Start14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT14_bits_t         LIMIT14;       /**< Offset: 0x168 (R/W  32) This is Limit14 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE14_bits_t         WRITE14;       /**< Offset: 0x16C (R/W  32) This is Write14 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ14_bits_t          READ14;        /**< Offset: 0x170 (R/W  32) This is Read14 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START15_bits_t         START15;       /**< Offset: 0x174 (R/W  32) This is Start15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT15_bits_t         LIMIT15;       /**< Offset: 0x178 (R/W  32) This is Limit15 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE15_bits_t         WRITE15;       /**< Offset: 0x17C (R/W  32) This is Write15 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ15_bits_t          READ15;        /**< Offset: 0x180 (R/W  32) This is Read15 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_START16_bits_t         START16;       /**< Offset: 0x184 (R/W  32) This is Start16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_LIMIT16_bits_t         LIMIT16;       /**< Offset: 0x188 (R/W  32) This is Limit16 register. Unless the Start register is less than or equal to the Limit register,     the associated register set [RR] is Disabled, and has no effect on permissions.     The default state of these registers, in all of the register sets, is this Disabled state. While all     register sets remain Disabled, no Protection Master except Master #0 (PCH HW) will be able to perform     any Flash access anywhere through SAFS operations, and this restriction includes the EC firmware (as     Master #5). */
  __IO  __SAFBC_WRITE16_bits_t         WRITE16;       /**< Offset: 0x18C (R/W  32) This is Write16 register. It applies to the region defined by the associated [RR] Start and     Limit registers. Bits at positions [0]--[7] grant Write/Erase permission to Permission Masters     numbered 0--7 respectively. */
  __IO  __SAFBC_READ16_bits_t          READ16;        /**< Offset: 0x190 (R/W  32) This is Read16 register. Bits at positions [0]--[7] grant Read permission to Permission     Masters numbered 0--7 respectively. */
  __IO  __SAFBC_POLL_TOUT_bits_t       POLL_TOUT;     /**< Offset: 0x194 (R/W  32) This is an error timeout value imposed on any consecutive series of Poll-1 commands to a     Flash. The timeout counter starts whenever any new Poll-1 sequence starts, and stops when a     Poll-1 detects Not-BUSY status from the Flash. */
  __IO  __SAFBC_POLL_INTERVAL_bits_t   POLL_INTERVAL; /**< Offset: 0x198 (R/W  32) This register should be kept zero except for diagnostic purposes. Where needed, it can be set     to provide spacing between consecutive Poll-1 operations to limit the amount of traffic. */
  __IO  __SAFBC_TIMEOUT_RESUSP_bits_t  TIMEOUT_RESUSP; /**< Offset: 0x19C (R/W  32) The value placed in this register provides necessary programmable support to a Flash that is     performing an Erase or a Program operation.  When an Erase or Program is started or Resumed, a     Suspend is held off until this time expires.  While an Erase or Program is in process but     Suspended, a Resume is forced when this time expires, even if Read requests are still pending,     causing the Erase or Program operation to continue, and again inhibiting the next Suspend until     it expires again. */
  __IO  __SAFBC_TIMEOUT_RD_SUSP_bits_t TIMEOUT_RD_SUSP; /**< Offset: 0x1A0 (R/W  32) This register is used to detect when a series of Read transfers has finished. When this time     expires without any new Read request, any suspended Erase or Program operation is given the     Resume command to continue. */
  __IO  __SAFBC_CS_POLL2_MSK_bits_t    CS_POLL2_MSK;  /**< Offset: 0x1A4 (R/W  32) Upon issuing a Suspend command, a Poll-1 operation is repeated until the Flash is no longer     BUSY, then a Poll-2 operation to determine whether the Flash device is in a Suspended state. */
  __IO  __SAFBC_TESTREG_CTRL0_bits_t   TESTREG_CTRL0; /**< Offset: 0x1A8 (R/W  32) This register provides special mode control. */
  __IO  __SAFBC_TIMOUTDLY_SUSPCHK_bits_t TIMOUTDLY_SUSPCHK; /**< Offset: 0x1AC (R/W  32) This register provides a time delay for support of some Flash devices. It holds off the     first Poll-1 check after a Suspend command has been given to the Flash. */
  __IO  __SAFBC_TESTREG_CTRL1_bits_t   TESTREG_CTRL1; /**< Offset: 0x1B0 (R/W  32) Micron requires a prefix consisting of two command frames (in separate CS# assertions) to     be sent before Mode information will be recognized to enter Continuous Read mode. This     technique is called (Micron XIP) in their datasheets.  The support for these chips requires     setting up this register and setting the corresponding Prefix Enable bit(s) to enable this     handling.  The first command frame of the Prefix sequence will be a single byte consisting of     the Write Enable opcode, taken from the OP_WE opcode field of the appropriate Opcode A register     (Section 7.3.5, on page 113).  The second command frame of the Prefix sequence comes from this     register, consisting of first the PREFIX_OP byte for the corresponding Flash device (CS0/CS1),     and then its PREFIX_DAT byte.  The PREFIX_OP byte will be 81h always, which is documented as     the Micron opcode (WRITE VOLATILE CONFIGURATION REGISTER) The PREFIX_DAT byte contains the data     written to the Micron Flash device's Volatile Configuration Register. It has potential     side-effects beyond just enabling Micron XIP Mode, so it must be constructed very carefully. */
} safbc_registers_t;
/** @}  end of SAF BRIDGE COMPONENT */

#endif /* _PIC32CX_0525SG12_SAFBC_COMPONENT_H_ */
